/*
 * Namely API
 * Move your app forward with the Namely API Move your app forward with the Namely API
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateEvent;
import com.konfigthis.client.model.CreateEventPayload;
import com.konfigthis.client.model.GetEventsResponse;
import com.konfigthis.client.model.HomeFeedGetEventResponse;
import com.konfigthis.client.model.PostEventsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EventsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call eventsCall(Integer limit, String after, String filterType, String profileId, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (filterType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[type]", filterType));
        }

        if (profileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("profile_id", profileId));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsValidateBeforeCall(Integer limit, String after, String filterType, String profileId, String order, final ApiCallback _callback) throws ApiException {
        return eventsCall(limit, after, filterType, profileId, order, _callback);

    }


    private ApiResponse<GetEventsResponse> eventsWithHttpInfo(Integer limit, String after, String filterType, String profileId, String order) throws ApiException {
        okhttp3.Call localVarCall = eventsValidateBeforeCall(limit, after, filterType, profileId, order, null);
        Type localVarReturnType = new TypeToken<GetEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call eventsAsync(Integer limit, String after, String filterType, String profileId, String order, final ApiCallback<GetEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsValidateBeforeCall(limit, after, filterType, profileId, order, _callback);
        Type localVarReturnType = new TypeToken<GetEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EventsRequestBuilder {
        private Integer limit;
        private String after;
        private String filterType;
        private String profileId;
        private String order;

        private EventsRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Limit of records to be retrieved (optional)
         * @return EventsRequestBuilder
         */
        public EventsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set after
         * @param after &lt;code&gt;id&lt;/code&gt; of the first record BEFORE the events you want to retrieve (optional)
         * @return EventsRequestBuilder
         */
        public EventsRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set filterType
         * @param filterType The type of event you want to retrieve; examples include &#x60;birthday&#x60;, &#x60;announcement&#x60;, &#x60;recent_arrival&#x60; or &#x60;anniversary&#x60; (optional)
         * @return EventsRequestBuilder
         */
        public EventsRequestBuilder filterType(String filterType) {
            this.filterType = filterType;
            return this;
        }
        
        /**
         * Set profileId
         * @param profileId &lt;code&gt;id&lt;/code&gt; of the profile that you wish to pull all associated events from (optional)
         * @return EventsRequestBuilder
         */
        public EventsRequestBuilder profileId(String profileId) {
            this.profileId = profileId;
            return this;
        }
        
        /**
         * Set order
         * @param order This parameter allows you to change how results are ordered. Valid values are &#x60;asc&#x60; and &#x60;desc&#x60; - It defaults to &#x60;desc&#x60; (optional)
         * @return EventsRequestBuilder
         */
        public EventsRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for events
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return eventsCall(limit, after, filterType, profileId, order, _callback);
        }


        /**
         * Execute events request
         * @return GetEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public GetEventsResponse execute() throws ApiException {
            ApiResponse<GetEventsResponse> localVarResp = eventsWithHttpInfo(limit, after, filterType, profileId, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute events request with HTTP info returned
         * @return ApiResponse&lt;GetEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetEventsResponse> executeWithHttpInfo() throws ApiException {
            return eventsWithHttpInfo(limit, after, filterType, profileId, order);
        }

        /**
         * Execute events request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetEventsResponse> _callback) throws ApiException {
            return eventsAsync(limit, after, filterType, profileId, order, _callback);
        }
    }

    /**
     * Get all Events
     * Returns all events, paginated. Linked to the event is an array of any profiles that commented on the event. Only events associated with the profiles of active employees are eligible to appear.
     * @return EventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public EventsRequestBuilder events() throws IllegalArgumentException {
        return new EventsRequestBuilder();
    }
    private okhttp3.Call events_0Call(CreateEvent createEvent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEvent;

        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call events_0ValidateBeforeCall(CreateEvent createEvent, final ApiCallback _callback) throws ApiException {
        return events_0Call(createEvent, _callback);

    }


    private ApiResponse<PostEventsResponse> events_0WithHttpInfo(CreateEvent createEvent) throws ApiException {
        okhttp3.Call localVarCall = events_0ValidateBeforeCall(createEvent, null);
        Type localVarReturnType = new TypeToken<PostEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call events_0Async(CreateEvent createEvent, final ApiCallback<PostEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = events_0ValidateBeforeCall(createEvent, _callback);
        Type localVarReturnType = new TypeToken<PostEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Events0RequestBuilder {
        private final List<CreateEventPayload> events;

        private Events0RequestBuilder(List<CreateEventPayload> events) {
            this.events = events;
        }

        /**
         * Build call for events_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateEvent createEvent = buildBodyParams();
            return events_0Call(createEvent, _callback);
        }

        private CreateEvent buildBodyParams() {
            CreateEvent createEvent = new CreateEvent();
            createEvent.events(this.events);
            return createEvent;
        }

        /**
         * Execute events_0 request
         * @return PostEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
         </table>
         */
        public PostEventsResponse execute() throws ApiException {
            CreateEvent createEvent = buildBodyParams();
            ApiResponse<PostEventsResponse> localVarResp = events_0WithHttpInfo(createEvent);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute events_0 request with HTTP info returned
         * @return ApiResponse&lt;PostEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PostEventsResponse> executeWithHttpInfo() throws ApiException {
            CreateEvent createEvent = buildBodyParams();
            return events_0WithHttpInfo(createEvent);
        }

        /**
         * Execute events_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PostEventsResponse> _callback) throws ApiException {
            CreateEvent createEvent = buildBodyParams();
            return events_0Async(createEvent, _callback);
        }
    }

    /**
     * Create an Announcement
     * Creates an announcement. Other event types are auto-generated and cannot be manually created.  The file parameters allow you to include a file which is located in the announcement. As with uploading a file to a profile, the file must be previously uploaded via the &#x60;file create&#x60; endpoint.
     * @return Events0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
     </table>
     */
    public Events0RequestBuilder events_0(List<CreateEventPayload> events) throws IllegalArgumentException {
        if (events == null) throw new IllegalArgumentException("\"events\" is required but got null");
        return new Events0RequestBuilder(events);
    }
    private okhttp3.Call getEventCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEvent(Async)");
        }

        return getEventCall(id, _callback);

    }


    private ApiResponse<HomeFeedGetEventResponse> getEventWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getEventValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<HomeFeedGetEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventAsync(String id, final ApiCallback<HomeFeedGetEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<HomeFeedGetEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventRequestBuilder {
        private final String id;

        private GetEventRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventCall(id, _callback);
        }


        /**
         * Execute getEvent request
         * @return HomeFeedGetEventResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public HomeFeedGetEventResponse execute() throws ApiException {
            ApiResponse<HomeFeedGetEventResponse> localVarResp = getEventWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEvent request with HTTP info returned
         * @return ApiResponse&lt;HomeFeedGetEventResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeFeedGetEventResponse> executeWithHttpInfo() throws ApiException {
            return getEventWithHttpInfo(id);
        }

        /**
         * Execute getEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeFeedGetEventResponse> _callback) throws ApiException {
            return getEventAsync(id, _callback);
        }
    }

    /**
     * Get an Event
     * Returns information about a single event.
     * @param id id of event. (required)
     * @return GetEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetEventRequestBuilder getEvent(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetEventRequestBuilder(id);
    }
}
