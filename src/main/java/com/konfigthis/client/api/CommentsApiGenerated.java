/*
 * Namely API
 * Move your app forward with the Namely API Move your app forward with the Namely API
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateComment;
import com.konfigthis.client.model.CreateCommentPayload;
import com.konfigthis.client.model.HomeFeedCreateEventCommentResponse;
import com.konfigthis.client.model.HomeFeedGetEventCommentsResponse;
import com.konfigthis.client.model.HomeFeedRemoveEventCommentResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CommentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CommentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CommentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createEventCommentCall(String id, CreateComment createComment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createComment;

        // create path and map variables
        String localVarPath = "/events/{id}/comments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEventCommentValidateBeforeCall(String id, CreateComment createComment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createEventComment(Async)");
        }

        return createEventCommentCall(id, createComment, _callback);

    }


    private ApiResponse<HomeFeedCreateEventCommentResponse> createEventCommentWithHttpInfo(String id, CreateComment createComment) throws ApiException {
        okhttp3.Call localVarCall = createEventCommentValidateBeforeCall(id, createComment, null);
        Type localVarReturnType = new TypeToken<HomeFeedCreateEventCommentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEventCommentAsync(String id, CreateComment createComment, final ApiCallback<HomeFeedCreateEventCommentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEventCommentValidateBeforeCall(id, createComment, _callback);
        Type localVarReturnType = new TypeToken<HomeFeedCreateEventCommentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEventCommentRequestBuilder {
        private final List<CreateCommentPayload> comments;
        private final String id;

        private CreateEventCommentRequestBuilder(List<CreateCommentPayload> comments, String id) {
            this.comments = comments;
            this.id = id;
        }

        /**
         * Build call for createEventComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateComment createComment = buildBodyParams();
            return createEventCommentCall(id, createComment, _callback);
        }

        private CreateComment buildBodyParams() {
            CreateComment createComment = new CreateComment();
            createComment.comments(this.comments);
            return createComment;
        }

        /**
         * Execute createEventComment request
         * @return HomeFeedCreateEventCommentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Response </td><td>  -  </td></tr>
         </table>
         */
        public HomeFeedCreateEventCommentResponse execute() throws ApiException {
            CreateComment createComment = buildBodyParams();
            ApiResponse<HomeFeedCreateEventCommentResponse> localVarResp = createEventCommentWithHttpInfo(id, createComment);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEventComment request with HTTP info returned
         * @return ApiResponse&lt;HomeFeedCreateEventCommentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeFeedCreateEventCommentResponse> executeWithHttpInfo() throws ApiException {
            CreateComment createComment = buildBodyParams();
            return createEventCommentWithHttpInfo(id, createComment);
        }

        /**
         * Execute createEventComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeFeedCreateEventCommentResponse> _callback) throws ApiException {
            CreateComment createComment = buildBodyParams();
            return createEventCommentAsync(id, createComment, _callback);
        }
    }

    /**
     * Create an Event&#39;s Comment
     * Creates a comment on a particular event.
     * @param id id of event. (required)
     * @return CreateEventCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateEventCommentRequestBuilder createEventComment(List<CreateCommentPayload> comments, String id) throws IllegalArgumentException {
        if (comments == null) throw new IllegalArgumentException("\"comments\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CreateEventCommentRequestBuilder(comments, id);
    }
    private okhttp3.Call getEventCommentsCall(String eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{event-id}/comments"
            .replace("{" + "event-id" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventCommentsValidateBeforeCall(String eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getEventComments(Async)");
        }

        return getEventCommentsCall(eventId, _callback);

    }


    private ApiResponse<HomeFeedGetEventCommentsResponse> getEventCommentsWithHttpInfo(String eventId) throws ApiException {
        okhttp3.Call localVarCall = getEventCommentsValidateBeforeCall(eventId, null);
        Type localVarReturnType = new TypeToken<HomeFeedGetEventCommentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventCommentsAsync(String eventId, final ApiCallback<HomeFeedGetEventCommentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventCommentsValidateBeforeCall(eventId, _callback);
        Type localVarReturnType = new TypeToken<HomeFeedGetEventCommentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventCommentsRequestBuilder {
        private final String eventId;

        private GetEventCommentsRequestBuilder(String eventId) {
            this.eventId = eventId;
        }

        /**
         * Build call for getEventComments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventCommentsCall(eventId, _callback);
        }


        /**
         * Execute getEventComments request
         * @return HomeFeedGetEventCommentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public HomeFeedGetEventCommentsResponse execute() throws ApiException {
            ApiResponse<HomeFeedGetEventCommentsResponse> localVarResp = getEventCommentsWithHttpInfo(eventId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEventComments request with HTTP info returned
         * @return ApiResponse&lt;HomeFeedGetEventCommentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeFeedGetEventCommentsResponse> executeWithHttpInfo() throws ApiException {
            return getEventCommentsWithHttpInfo(eventId);
        }

        /**
         * Execute getEventComments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeFeedGetEventCommentsResponse> _callback) throws ApiException {
            return getEventCommentsAsync(eventId, _callback);
        }
    }

    /**
     * Get an Event&#39;s Comments
     * Returns all comments associated with a particular event.
     * @param eventId &lt;code&gt;id&lt;/code&gt; of the event whose comments you want to view (required)
     * @return GetEventCommentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetEventCommentsRequestBuilder getEventComments(String eventId) throws IllegalArgumentException {
        if (eventId == null) throw new IllegalArgumentException("\"eventId\" is required but got null");
            

        return new GetEventCommentsRequestBuilder(eventId);
    }
    private okhttp3.Call removeEventCommentCall(String eventId, String commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{event-id}/comments/{comment-id}"
            .replace("{" + "event-id" + "}", localVarApiClient.escapeString(eventId.toString()))
            .replace("{" + "comment-id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEventCommentValidateBeforeCall(String eventId, String commentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling removeEventComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling removeEventComment(Async)");
        }

        return removeEventCommentCall(eventId, commentId, _callback);

    }


    private ApiResponse<HomeFeedRemoveEventCommentResponse> removeEventCommentWithHttpInfo(String eventId, String commentId) throws ApiException {
        okhttp3.Call localVarCall = removeEventCommentValidateBeforeCall(eventId, commentId, null);
        Type localVarReturnType = new TypeToken<HomeFeedRemoveEventCommentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeEventCommentAsync(String eventId, String commentId, final ApiCallback<HomeFeedRemoveEventCommentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEventCommentValidateBeforeCall(eventId, commentId, _callback);
        Type localVarReturnType = new TypeToken<HomeFeedRemoveEventCommentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveEventCommentRequestBuilder {
        private final String eventId;
        private final String commentId;

        private RemoveEventCommentRequestBuilder(String eventId, String commentId) {
            this.eventId = eventId;
            this.commentId = commentId;
        }

        /**
         * Build call for removeEventComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Succssful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeEventCommentCall(eventId, commentId, _callback);
        }


        /**
         * Execute removeEventComment request
         * @return HomeFeedRemoveEventCommentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Succssful Response </td><td>  -  </td></tr>
         </table>
         */
        public HomeFeedRemoveEventCommentResponse execute() throws ApiException {
            ApiResponse<HomeFeedRemoveEventCommentResponse> localVarResp = removeEventCommentWithHttpInfo(eventId, commentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeEventComment request with HTTP info returned
         * @return ApiResponse&lt;HomeFeedRemoveEventCommentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Succssful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeFeedRemoveEventCommentResponse> executeWithHttpInfo() throws ApiException {
            return removeEventCommentWithHttpInfo(eventId, commentId);
        }

        /**
         * Execute removeEventComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Succssful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeFeedRemoveEventCommentResponse> _callback) throws ApiException {
            return removeEventCommentAsync(eventId, commentId, _callback);
        }
    }

    /**
     * Delete an Event&#39;s Comment
     * Delete a particular comment on an event.
     * @param eventId &lt;code&gt;id&lt;/code&gt; of the event to which the comment belongs (required)
     * @param commentId &lt;code&gt;id&lt;/code&gt; of the comment you want to delete from the event (required)
     * @return RemoveEventCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succssful Response </td><td>  -  </td></tr>
     </table>
     */
    public RemoveEventCommentRequestBuilder removeEventComment(String eventId, String commentId) throws IllegalArgumentException {
        if (eventId == null) throw new IllegalArgumentException("\"eventId\" is required but got null");
            

        if (commentId == null) throw new IllegalArgumentException("\"commentId\" is required but got null");
            

        return new RemoveEventCommentRequestBuilder(eventId, commentId);
    }
}
