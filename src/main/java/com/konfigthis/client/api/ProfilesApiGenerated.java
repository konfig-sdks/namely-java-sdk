/*
 * Namely API
 * Move your app forward with the Namely API Move your app forward with the Namely API
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateProfile;
import com.konfigthis.client.model.CreateProfilePayload;
import com.konfigthis.client.model.GetProfilesResponse;
import com.konfigthis.client.model.PostProfilesResponse;
import com.konfigthis.client.model.ProfilesGetCurrentUserProfileResponse;
import com.konfigthis.client.model.ProfilesGetProfileByIdResponse;
import com.konfigthis.client.model.ProfilesUpdateProfileWithNewJobTitleResponse;
import com.konfigthis.client.model.UpdateProfile;
import com.konfigthis.client.model.UpdateProfilePayload;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProfilesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProfilesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProfilesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCurrentUserProfileCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profiles/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentUserProfileValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCurrentUserProfileCall(_callback);

    }


    private ApiResponse<ProfilesGetCurrentUserProfileResponse> getCurrentUserProfileWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCurrentUserProfileValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ProfilesGetCurrentUserProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrentUserProfileAsync(final ApiCallback<ProfilesGetCurrentUserProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentUserProfileValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ProfilesGetCurrentUserProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrentUserProfileRequestBuilder {

        private GetCurrentUserProfileRequestBuilder() {
        }

        /**
         * Build call for getCurrentUserProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrentUserProfileCall(_callback);
        }


        /**
         * Execute getCurrentUserProfile request
         * @return ProfilesGetCurrentUserProfileResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ProfilesGetCurrentUserProfileResponse execute() throws ApiException {
            ApiResponse<ProfilesGetCurrentUserProfileResponse> localVarResp = getCurrentUserProfileWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrentUserProfile request with HTTP info returned
         * @return ApiResponse&lt;ProfilesGetCurrentUserProfileResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProfilesGetCurrentUserProfileResponse> executeWithHttpInfo() throws ApiException {
            return getCurrentUserProfileWithHttpInfo();
        }

        /**
         * Execute getCurrentUserProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProfilesGetCurrentUserProfileResponse> _callback) throws ApiException {
            return getCurrentUserProfileAsync(_callback);
        }
    }

    /**
     * Get Current User&#39;s Profile
     * Returns same information about the profile as in the #endpoint:E2y2tKYabriCCzTiJ endpoint but isolated, and about the current user only (the profile that owns the access token used to access the API).  Every client-created custom field (the token bearer has permission to see) will appear as key at the bottom of the profile object.
     * @return GetCurrentUserProfileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentUserProfileRequestBuilder getCurrentUserProfile() throws IllegalArgumentException {
        return new GetCurrentUserProfileRequestBuilder();
    }
    private okhttp3.Call getProfileByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profiles/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfileByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProfileById(Async)");
        }

        return getProfileByIdCall(id, _callback);

    }


    private ApiResponse<ProfilesGetProfileByIdResponse> getProfileByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getProfileByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ProfilesGetProfileByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProfileByIdAsync(String id, final ApiCallback<ProfilesGetProfileByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProfileByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ProfilesGetProfileByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProfileByIdRequestBuilder {
        private final String id;

        private GetProfileByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getProfileById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProfileByIdCall(id, _callback);
        }


        /**
         * Execute getProfileById request
         * @return ProfilesGetProfileByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ProfilesGetProfileByIdResponse execute() throws ApiException {
            ApiResponse<ProfilesGetProfileByIdResponse> localVarResp = getProfileByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProfileById request with HTTP info returned
         * @return ApiResponse&lt;ProfilesGetProfileByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProfilesGetProfileByIdResponse> executeWithHttpInfo() throws ApiException {
            return getProfileByIdWithHttpInfo(id);
        }

        /**
         * Execute getProfileById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProfilesGetProfileByIdResponse> _callback) throws ApiException {
            return getProfileByIdAsync(id, _callback);
        }
    }

    /**
     * Get a Profile
     * Returns same information about the profile as in the #endpoint:E2y2tKYabriCCzTiJ endpoint but isolated.  Every client-created custom field (the token bearer has permission to see) will appear as key at the bottom of the profile object.  As a note, the following fields will always be returned in the API response, regardless of user permissions:  1. id 2. email 3. first_name 4. last_name 5. user_status 6. updated_at 7. created_at 8. preferred_name 9. full_name 10. job_title   These will NOT be exposed to the user in the UI if their permissions are set correctly.
     * @param id id of the profile you want to view (required)
     * @return GetProfileByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetProfileByIdRequestBuilder getProfileById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetProfileByIdRequestBuilder(id);
    }
    private okhttp3.Call profilesCall(Integer page, Integer perPage, String profileFormat, String sort, String filterFirstName, String filterLastName, String filterEmail, String filterPersonalEmail, String filterJobTitle, String filterReportsTo, String filterUserStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (profileFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("profile_format", profileFormat));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (filterFirstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[first_name]", filterFirstName));
        }

        if (filterLastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[last_name]", filterLastName));
        }

        if (filterEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[email]", filterEmail));
        }

        if (filterPersonalEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[personal_email]", filterPersonalEmail));
        }

        if (filterJobTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[job_title]", filterJobTitle));
        }

        if (filterReportsTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[reports_to]", filterReportsTo));
        }

        if (filterUserStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[user_status]", filterUserStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesValidateBeforeCall(Integer page, Integer perPage, String profileFormat, String sort, String filterFirstName, String filterLastName, String filterEmail, String filterPersonalEmail, String filterJobTitle, String filterReportsTo, String filterUserStatus, final ApiCallback _callback) throws ApiException {
        return profilesCall(page, perPage, profileFormat, sort, filterFirstName, filterLastName, filterEmail, filterPersonalEmail, filterJobTitle, filterReportsTo, filterUserStatus, _callback);

    }


    private ApiResponse<GetProfilesResponse> profilesWithHttpInfo(Integer page, Integer perPage, String profileFormat, String sort, String filterFirstName, String filterLastName, String filterEmail, String filterPersonalEmail, String filterJobTitle, String filterReportsTo, String filterUserStatus) throws ApiException {
        okhttp3.Call localVarCall = profilesValidateBeforeCall(page, perPage, profileFormat, sort, filterFirstName, filterLastName, filterEmail, filterPersonalEmail, filterJobTitle, filterReportsTo, filterUserStatus, null);
        Type localVarReturnType = new TypeToken<GetProfilesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call profilesAsync(Integer page, Integer perPage, String profileFormat, String sort, String filterFirstName, String filterLastName, String filterEmail, String filterPersonalEmail, String filterJobTitle, String filterReportsTo, String filterUserStatus, final ApiCallback<GetProfilesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesValidateBeforeCall(page, perPage, profileFormat, sort, filterFirstName, filterLastName, filterEmail, filterPersonalEmail, filterJobTitle, filterReportsTo, filterUserStatus, _callback);
        Type localVarReturnType = new TypeToken<GetProfilesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProfilesRequestBuilder {
        private Integer page;
        private Integer perPage;
        private String profileFormat;
        private String sort;
        private String filterFirstName;
        private String filterLastName;
        private String filterEmail;
        private String filterPersonalEmail;
        private String filterJobTitle;
        private String filterReportsTo;
        private String filterUserStatus;

        private ProfilesRequestBuilder() {
        }

        /**
         * Set page
         * @param page the page of information you&#39;d like to receive. (optional)
         * @return ProfilesRequestBuilder
         */
        public ProfilesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage the number of employees to retrieve when using pagination; default is 30 and the limit is 50. (optional)
         * @return ProfilesRequestBuilder
         */
        public ProfilesRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set profileFormat
         * @param profileFormat format of the profile object; only &lt;code&gt;short&lt;/code&gt; is supported - returns a truncated version of the profile object (optional)
         * @return ProfilesRequestBuilder
         */
        public ProfilesRequestBuilder profileFormat(String profileFormat) {
            this.profileFormat = profileFormat;
            return this;
        }
        
        /**
         * Set sort
         * @param sort sort order of profiles; valid values - &lt;code&gt;first_name&lt;/code&gt;, &lt;code&gt;last_name&lt;/code&gt;, &lt;code&gt;created_at&lt;/code&gt;, &lt;code&gt;updated_at&lt;/code&gt;; prepend with a - (minus) sign to reverse the order (optional)
         * @return ProfilesRequestBuilder
         */
        public ProfilesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set filterFirstName
         * @param filterFirstName returns only profiles with the defined first name (optional)
         * @return ProfilesRequestBuilder
         */
        public ProfilesRequestBuilder filterFirstName(String filterFirstName) {
            this.filterFirstName = filterFirstName;
            return this;
        }
        
        /**
         * Set filterLastName
         * @param filterLastName returns only profiles with the defined last name (optional)
         * @return ProfilesRequestBuilder
         */
        public ProfilesRequestBuilder filterLastName(String filterLastName) {
            this.filterLastName = filterLastName;
            return this;
        }
        
        /**
         * Set filterEmail
         * @param filterEmail returns only profiles with the defined (company) email (optional)
         * @return ProfilesRequestBuilder
         */
        public ProfilesRequestBuilder filterEmail(String filterEmail) {
            this.filterEmail = filterEmail;
            return this;
        }
        
        /**
         * Set filterPersonalEmail
         * @param filterPersonalEmail returns only profiles with the defined personal email (optional)
         * @return ProfilesRequestBuilder
         */
        public ProfilesRequestBuilder filterPersonalEmail(String filterPersonalEmail) {
            this.filterPersonalEmail = filterPersonalEmail;
            return this;
        }
        
        /**
         * Set filterJobTitle
         * @param filterJobTitle returns only profiles with the defined job title; must be the job_title&#39;s &lt;code&gt;title&lt;/code&gt; (optional)
         * @return ProfilesRequestBuilder
         */
        public ProfilesRequestBuilder filterJobTitle(String filterJobTitle) {
            this.filterJobTitle = filterJobTitle;
            return this;
        }
        
        /**
         * Set filterReportsTo
         * @param filterReportsTo &lt;code&gt;id&lt;/code&gt; of the profile for whose direct reports you to view; returns only those profiles (optional)
         * @return ProfilesRequestBuilder
         */
        public ProfilesRequestBuilder filterReportsTo(String filterReportsTo) {
            this.filterReportsTo = filterReportsTo;
            return this;
        }
        
        /**
         * Set filterUserStatus
         * @param filterUserStatus returns only profiles with the defined &lt;code&gt;user_status&lt;/code&gt;; &lt;code&gt;active&lt;/code&gt;, &lt;code&gt;pending&lt;/code&gt;, and &lt;code&gt;inactive&lt;/code&gt; are supported (optional)
         * @return ProfilesRequestBuilder
         */
        public ProfilesRequestBuilder filterUserStatus(String filterUserStatus) {
            this.filterUserStatus = filterUserStatus;
            return this;
        }
        
        /**
         * Build call for profiles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return profilesCall(page, perPage, profileFormat, sort, filterFirstName, filterLastName, filterEmail, filterPersonalEmail, filterJobTitle, filterReportsTo, filterUserStatus, _callback);
        }


        /**
         * Execute profiles request
         * @return GetProfilesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public GetProfilesResponse execute() throws ApiException {
            ApiResponse<GetProfilesResponse> localVarResp = profilesWithHttpInfo(page, perPage, profileFormat, sort, filterFirstName, filterLastName, filterEmail, filterPersonalEmail, filterJobTitle, filterReportsTo, filterUserStatus);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute profiles request with HTTP info returned
         * @return ApiResponse&lt;GetProfilesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetProfilesResponse> executeWithHttpInfo() throws ApiException {
            return profilesWithHttpInfo(page, perPage, profileFormat, sort, filterFirstName, filterLastName, filterEmail, filterPersonalEmail, filterJobTitle, filterReportsTo, filterUserStatus);
        }

        /**
         * Execute profiles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetProfilesResponse> _callback) throws ApiException {
            return profilesAsync(page, perPage, profileFormat, sort, filterFirstName, filterLastName, filterEmail, filterPersonalEmail, filterJobTitle, filterReportsTo, filterUserStatus, _callback);
        }
    }

    /**
     * Get all Profiles
     * Returns all active and inactive employee profiles in the same format as the #endpoint:wn3pJ3WtCYWuuBL6r endpoint.  Every client-created custom field (the token bearer has permission to see) will appear as key at the bottom of the profile object.  As a note, the following fields will always be returned in the API response, regardless of user permissions:  1. id 2. email 3. first_name 4. last_name 5. user_status 6. updated_at 7. created_at 8. preferred_name 9. full_name 10. job_title   These will NOT be exposed to the user in the UI if their permissions are set correctly.  ### Important Note About the Endpoint  Please ensure you&#39;re paginating the response of the GET &#x60;/profiles&#x60; endpoint to ensure optimal performance avoid possible time-outs.  **Examples:** 1. &#x60;https://clientname.namely.com/api/v1/profiles.json?page&#x3D;1&amp;per_page&#x3D;20&amp;filter[user_status]&#x3D;active&#x60; 2. &#x60;https://clientname.namely.com/api/v1/profiles.json?page&#x3D;2&amp;per_page&#x3D;20&amp;filter[user_status]&#x3D;active&#x60; 3. &#x60;https://clientname.namely.com/api/v1/profiles.json?page&#x3D;3&amp;per_page&#x3D;20&amp;filter[user_status]&#x3D;active&#x60;  **Notes:** 1. If you do not specify the &#x60;per_page&#x60; value, this will default to 30. The max possible is 50. 2. If the response returns with less than the number of profiles requested (or none), the &#x60;count&#x60; in the &#x60;meta&#x60; object will be 0, and the &#x60;profiles&#x60; key will return an empty array.
     * @return ProfilesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ProfilesRequestBuilder profiles() throws IllegalArgumentException {
        return new ProfilesRequestBuilder();
    }
    private okhttp3.Call profiles_0Call(CreateProfile createProfile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProfile;

        // create path and map variables
        String localVarPath = "/profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profiles_0ValidateBeforeCall(CreateProfile createProfile, final ApiCallback _callback) throws ApiException {
        return profiles_0Call(createProfile, _callback);

    }


    private ApiResponse<PostProfilesResponse> profiles_0WithHttpInfo(CreateProfile createProfile) throws ApiException {
        okhttp3.Call localVarCall = profiles_0ValidateBeforeCall(createProfile, null);
        Type localVarReturnType = new TypeToken<PostProfilesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call profiles_0Async(CreateProfile createProfile, final ApiCallback<PostProfilesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = profiles_0ValidateBeforeCall(createProfile, _callback);
        Type localVarReturnType = new TypeToken<PostProfilesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Profiles0RequestBuilder {
        private final List<CreateProfilePayload> profiles;

        private Profiles0RequestBuilder(List<CreateProfilePayload> profiles) {
            this.profiles = profiles;
        }

        /**
         * Build call for profiles_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateProfile createProfile = buildBodyParams();
            return profiles_0Call(createProfile, _callback);
        }

        private CreateProfile buildBodyParams() {
            CreateProfile createProfile = new CreateProfile();
            createProfile.profiles(this.profiles);
            return createProfile;
        }

        /**
         * Execute profiles_0 request
         * @return PostProfilesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Response </td><td>  -  </td></tr>
         </table>
         */
        public PostProfilesResponse execute() throws ApiException {
            CreateProfile createProfile = buildBodyParams();
            ApiResponse<PostProfilesResponse> localVarResp = profiles_0WithHttpInfo(createProfile);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute profiles_0 request with HTTP info returned
         * @return ApiResponse&lt;PostProfilesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PostProfilesResponse> executeWithHttpInfo() throws ApiException {
            CreateProfile createProfile = buildBodyParams();
            return profiles_0WithHttpInfo(createProfile);
        }

        /**
         * Execute profiles_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PostProfilesResponse> _callback) throws ApiException {
            CreateProfile createProfile = buildBodyParams();
            return profiles_0Async(createProfile, _callback);
        }
    }

    /**
     * Create a Profile
     * **Create a profile as a draft Onboarding session**  1. Ensure that the Onboarding feature has been enabled for your company. 2. In the body of the POST /profiles request, use \&quot;pending\&quot; as the value of the user_status field along with the other required fields found in the Request Body section below.  *Sample Request:* &#x60;&#x60;&#x60;json {     \&quot;profiles\&quot;: [         {             \&quot;first_name\&quot;: \&quot;John\&quot;,             \&quot;last_name\&quot;: \&quot;Smith\&quot;,             \&quot;user_status\&quot;: \&quot;pending\&quot;,             \&quot;start_date\&quot;: \&quot;2019-01-01\&quot;,             \&quot;personal_email\&quot;: \&quot;personal@email.com\&quot;,             \&quot;email\&quot;: \&quot;work@email.com\&quot;         }     ] } &#x60;&#x60;&#x60;  **Create a profile with a job title set**  1. Retrieve the title or id of a  by making a GET request to the /job_titles or /job_titles/{id} endpoint (see the  section). 2. In the body of the POST /profiles request, include the job_title field in addition to the other required fields found in the Request Body section below. 3. The value of the job_title field should be set to an object containing the title (string) or id (guid) of an existing job title. Passing both values is also valid.  *Sample Request:* &#x60;&#x60;&#x60;json {     \&quot;profiles\&quot;: [         {             \&quot;first_name\&quot;: \&quot;John\&quot;,             \&quot;last_name\&quot;: \&quot;Smith\&quot;,             \&quot;user_status\&quot;: \&quot;active\&quot;,             \&quot;start_date\&quot;: \&quot;2019-01-01\&quot;,             \&quot;personal_email\&quot;: \&quot;personal@email.com\&quot;,             \&quot;email\&quot;: \&quot;work@email.com\&quot;,             \&quot;job_title\&quot;: {              \&quot;id\&quot;: \&quot;a4d5783d-a447-4269-8724-b710d0267aa4\&quot;             }         }     ] } &#x60;&#x60;&#x60;  **Create a profile with an address set**  1. Retrieve the country_id of an  by making a GET request to the /countries endpoint (see the  section). 2. The state_id is the 2-letter abbreviation for a state in the United States. 3. In the body of the POST /profiles request, include the home field and set its value equal to an object containing a valid street address as well as the country_id and state_id. 4. Note that every field in the home object (address1, address2, city, state_id, country_id, or zip) is validated against an actual address. If any field in the address object is invalid, a 422 Unprocessable Entity error will be returned.  *Sample Request:* &#x60;&#x60;&#x60;json {     \&quot;profiles\&quot;: [         {             \&quot;first_name\&quot;: \&quot;John\&quot;,             \&quot;last_name\&quot;: \&quot;Smith\&quot;,             \&quot;user_status\&quot;: \&quot;active\&quot;,             \&quot;start_date\&quot;: \&quot;2019-01-01\&quot;,             \&quot;personal_email\&quot;: \&quot;personal@email.com\&quot;,             \&quot;email\&quot;: \&quot;work@email.com\&quot;,             \&quot;home\&quot;: {                 \&quot;address1\&quot;: \&quot;195 Broadway\&quot;,                 \&quot;address2\&quot;: \&quot;\&quot;,                 \&quot;city\&quot;: \&quot;New York\&quot;,                 \&quot;state_id\&quot;: \&quot;NY\&quot;,                 \&quot;country_id\&quot;: \&quot;US\&quot;,                 \&quot;zip\&quot;: \&quot;10007\&quot;             }         }     ] } &#x60;&#x60;&#x60;  **Create a profile with a salary set**  1. In the body of the POST /profiles request, include the salary field and set its value equal to an object containing a currency_type, a date representing the start date of the salary, and a yearly_amount. 2. \&quot;USD\&quot; is currently the only valid value for currency_type.  *Sample Request:* &#x60;&#x60;&#x60;json {     \&quot;profiles\&quot;: [         {             \&quot;first_name\&quot;: \&quot;John\&quot;,             \&quot;last_name\&quot;: \&quot;Smith\&quot;,             \&quot;user_status\&quot;: \&quot;active\&quot;,             \&quot;start_date\&quot;: \&quot;2019-01-01\&quot;,             \&quot;personal_email\&quot;: \&quot;personal@email.com\&quot;,             \&quot;email\&quot;: \&quot;work@email.com\&quot;,             \&quot;salary\&quot;: {                 \&quot;currency_type\&quot;: \&quot;USD\&quot;,                 \&quot;date\&quot;: \&quot;2019-01-10\&quot;,                 \&quot;yearly_amount\&quot;: 100000             }         }     ] } &#x60;&#x60;&#x60;
     * @return Profiles0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Response </td><td>  -  </td></tr>
     </table>
     */
    public Profiles0RequestBuilder profiles_0(List<CreateProfilePayload> profiles) throws IllegalArgumentException {
        if (profiles == null) throw new IllegalArgumentException("\"profiles\" is required but got null");
        return new Profiles0RequestBuilder(profiles);
    }
    private okhttp3.Call updateProfileWithNewJobTitleCall(String id, UpdateProfile updateProfile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateProfile;

        // create path and map variables
        String localVarPath = "/profiles/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProfileWithNewJobTitleValidateBeforeCall(String id, UpdateProfile updateProfile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateProfileWithNewJobTitle(Async)");
        }

        return updateProfileWithNewJobTitleCall(id, updateProfile, _callback);

    }


    private ApiResponse<ProfilesUpdateProfileWithNewJobTitleResponse> updateProfileWithNewJobTitleWithHttpInfo(String id, UpdateProfile updateProfile) throws ApiException {
        okhttp3.Call localVarCall = updateProfileWithNewJobTitleValidateBeforeCall(id, updateProfile, null);
        Type localVarReturnType = new TypeToken<ProfilesUpdateProfileWithNewJobTitleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateProfileWithNewJobTitleAsync(String id, UpdateProfile updateProfile, final ApiCallback<ProfilesUpdateProfileWithNewJobTitleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProfileWithNewJobTitleValidateBeforeCall(id, updateProfile, _callback);
        Type localVarReturnType = new TypeToken<ProfilesUpdateProfileWithNewJobTitleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateProfileWithNewJobTitleRequestBuilder {
        private final List<UpdateProfilePayload> profiles;
        private final String id;

        private UpdateProfileWithNewJobTitleRequestBuilder(List<UpdateProfilePayload> profiles, String id) {
            this.profiles = profiles;
            this.id = id;
        }

        /**
         * Build call for updateProfileWithNewJobTitle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateProfile updateProfile = buildBodyParams();
            return updateProfileWithNewJobTitleCall(id, updateProfile, _callback);
        }

        private UpdateProfile buildBodyParams() {
            UpdateProfile updateProfile = new UpdateProfile();
            updateProfile.profiles(this.profiles);
            return updateProfile;
        }

        /**
         * Execute updateProfileWithNewJobTitle request
         * @return ProfilesUpdateProfileWithNewJobTitleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ProfilesUpdateProfileWithNewJobTitleResponse execute() throws ApiException {
            UpdateProfile updateProfile = buildBodyParams();
            ApiResponse<ProfilesUpdateProfileWithNewJobTitleResponse> localVarResp = updateProfileWithNewJobTitleWithHttpInfo(id, updateProfile);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProfileWithNewJobTitle request with HTTP info returned
         * @return ApiResponse&lt;ProfilesUpdateProfileWithNewJobTitleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProfilesUpdateProfileWithNewJobTitleResponse> executeWithHttpInfo() throws ApiException {
            UpdateProfile updateProfile = buildBodyParams();
            return updateProfileWithNewJobTitleWithHttpInfo(id, updateProfile);
        }

        /**
         * Execute updateProfileWithNewJobTitle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProfilesUpdateProfileWithNewJobTitleResponse> _callback) throws ApiException {
            UpdateProfile updateProfile = buildBodyParams();
            return updateProfileWithNewJobTitleAsync(id, updateProfile, _callback);
        }
    }

    /**
     * Update a Profile
     * Note: the only fields that need to be included in a PUT /profiles/{id} request are the ones that should be updated.  **Update a profile with a new job title**  1. Retrieve the &#x60;title&#x60; or &#x60;id&#x60; of a  #model:JcAXAf5CGXH22bS6Z by making a GET request to the /job_titles or /job_titles/{id} endpoint (see the #docTextSection:FwRLDxsBbevBbo8uz section). 2. In the body of the PUT /profiles/{id} request, include the &#x60;job_title&#x60; field. 3. The value of the &#x60;job_title&#x60; field should be set to an object containing the &#x60;title&#x60; (string) or &#x60;id&#x60; (guid) of an existing job title. Passing both values is also valid.  _Sample Request:_ &#x60;&#x60;&#x60;json {     \&quot;profiles\&quot;: [         {             \&quot;job_title\&quot;: {              \&quot;id\&quot;: \&quot;a4d5783d-a447-4269-8724-b710d0267aa4\&quot;             }         }     ] } &#x60;&#x60;&#x60;  **Update a profile with a new address**  1. Retrieve the &#x60;country_id&#x60; of an #model:yq9tkBR24wuBhzizY by making a GET request to the /countries endpoint (see the #endpoint:ECuAqAqRDoaFMn9ZH section). 2. The &#x60;state_id&#x60; is the 2-letter abbreviation for a state in the United States. 3. In the body of the PUT /profiles/{id} request, include the &#x60;home&#x60; field and set its value equal to an object containing a valid street address as well as the &#x60;country_id&#x60; and &#x60;state_id&#x60;. 4. Note that every field in the &#x60;home&#x60; object (&#x60;address1&#x60;, &#x60;address2&#x60;, &#x60;city&#x60;, &#x60;state_id&#x60;, &#x60;country_id&#x60;, or &#x60;zip&#x60;) is validated against an actual address. If any field in the address object is invalid, a 422 Unprocessable Entity error will be returned.  _Sample Request:_ &#x60;&#x60;&#x60;json {     \&quot;profiles\&quot;: [         {             \&quot;home\&quot;: {                 \&quot;address1\&quot;: \&quot;195 Broadway\&quot;,                 \&quot;address2\&quot;: \&quot;\&quot;,                 \&quot;city\&quot;: \&quot;New York\&quot;,                 \&quot;state_id\&quot;: \&quot;NY\&quot;,                 \&quot;country_id\&quot;: \&quot;US\&quot;,                 \&quot;zip\&quot;: \&quot;10007\&quot;             }         }     ] } &#x60;&#x60;&#x60;  **Update a profile with a new salary**  1. In the body of the PUT /profiles/{id} request, include the &#x60;salary&#x60; field and set its value equal to an object containing a &#x60;currency_type&#x60;, a &#x60;date&#x60; representing the start date of the salary, and a &#x60;yearly_amount&#x60;. 2. \&quot;USD\&quot; is currently the only valid value for &#x60;currency_type&#x60;. 3. Note that the &#x60;date&#x60; is the start date of the new salary. When updating an employee&#39;s salary, the &#x60;date&#x60; value that&#39;s passed in must be at least 2 days after the &#x60;date&#x60; value of the preceding salary. This is because with each new salary, the previous salary is automatically end-dated with a date that must be at least 1 day after the start date of the previous salary. If a passed-in date is invalid, a 422 Unprocessable Entity error will be returned.  _Sample Request:_ &#x60;&#x60;&#x60;json {     \&quot;profiles\&quot;: [         {             \&quot;salary\&quot;: {                 \&quot;currency_type\&quot;: \&quot;USD\&quot;,                 \&quot;date\&quot;: \&quot;2019-01-10\&quot;,                 \&quot;yearly_amount\&quot;: 100000             }         }     ] } &#x60;&#x60;&#x60;
     * @param id id of the profile you want to view (required)
     * @return UpdateProfileWithNewJobTitleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProfileWithNewJobTitleRequestBuilder updateProfileWithNewJobTitle(List<UpdateProfilePayload> profiles, String id) throws IllegalArgumentException {
        if (profiles == null) throw new IllegalArgumentException("\"profiles\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateProfileWithNewJobTitleRequestBuilder(profiles, id);
    }
}
