/*
 * Namely API
 * Move your app forward with the Namely API Move your app forward with the Namely API
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateJobTier;
import com.konfigthis.client.model.CreateJobTierPayload;
import com.konfigthis.client.model.CreateJobTitle;
import com.konfigthis.client.model.CreateJobTitlePayload;
import com.konfigthis.client.model.JobsInfoCreateJobTierResponse;
import com.konfigthis.client.model.JobsInfoCreateJobTitleResponse;
import com.konfigthis.client.model.JobsInfoGetAllJobTiersResponse;
import com.konfigthis.client.model.JobsInfoGetAllJobTitlesResponse;
import com.konfigthis.client.model.JobsInfoGetJobTierResponse;
import com.konfigthis.client.model.JobsInfoGetJobTitleByIdResponse;
import com.konfigthis.client.model.JobsInfoUpdateJobTitleResponse;
import com.konfigthis.client.model.JobsInfoUpdateLabelResponse;
import com.konfigthis.client.model.UpdateJobTier;
import com.konfigthis.client.model.UpdateJobTierPayload;
import com.konfigthis.client.model.UpdateJobTitle;
import com.konfigthis.client.model.UpdateJobTitlePayload;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class JobsInfoApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobsInfoApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public JobsInfoApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createJobTierCall(CreateJobTier createJobTier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createJobTier;

        // create path and map variables
        String localVarPath = "/job_tiers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createJobTierValidateBeforeCall(CreateJobTier createJobTier, final ApiCallback _callback) throws ApiException {
        return createJobTierCall(createJobTier, _callback);

    }


    private ApiResponse<JobsInfoCreateJobTierResponse> createJobTierWithHttpInfo(CreateJobTier createJobTier) throws ApiException {
        okhttp3.Call localVarCall = createJobTierValidateBeforeCall(createJobTier, null);
        Type localVarReturnType = new TypeToken<JobsInfoCreateJobTierResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createJobTierAsync(CreateJobTier createJobTier, final ApiCallback<JobsInfoCreateJobTierResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createJobTierValidateBeforeCall(createJobTier, _callback);
        Type localVarReturnType = new TypeToken<JobsInfoCreateJobTierResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateJobTierRequestBuilder {
        private final List<CreateJobTierPayload> jobTiers;

        private CreateJobTierRequestBuilder(List<CreateJobTierPayload> jobTiers) {
            this.jobTiers = jobTiers;
        }

        /**
         * Build call for createJobTier
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateJobTier createJobTier = buildBodyParams();
            return createJobTierCall(createJobTier, _callback);
        }

        private CreateJobTier buildBodyParams() {
            CreateJobTier createJobTier = new CreateJobTier();
            createJobTier.jobTiers(this.jobTiers);
            return createJobTier;
        }

        /**
         * Execute createJobTier request
         * @return JobsInfoCreateJobTierResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
         </table>
         */
        public JobsInfoCreateJobTierResponse execute() throws ApiException {
            CreateJobTier createJobTier = buildBodyParams();
            ApiResponse<JobsInfoCreateJobTierResponse> localVarResp = createJobTierWithHttpInfo(createJobTier);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createJobTier request with HTTP info returned
         * @return ApiResponse&lt;JobsInfoCreateJobTierResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobsInfoCreateJobTierResponse> executeWithHttpInfo() throws ApiException {
            CreateJobTier createJobTier = buildBodyParams();
            return createJobTierWithHttpInfo(createJobTier);
        }

        /**
         * Execute createJobTier request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobsInfoCreateJobTierResponse> _callback) throws ApiException {
            CreateJobTier createJobTier = buildBodyParams();
            return createJobTierAsync(createJobTier, _callback);
        }
    }

    /**
     * Create a Job Tier
     * Creates a job tier.
     * @return CreateJobTierRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateJobTierRequestBuilder createJobTier(List<CreateJobTierPayload> jobTiers) throws IllegalArgumentException {
        if (jobTiers == null) throw new IllegalArgumentException("\"jobTiers\" is required but got null");
        return new CreateJobTierRequestBuilder(jobTiers);
    }
    private okhttp3.Call createJobTitleCall(CreateJobTitle createJobTitle, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createJobTitle;

        // create path and map variables
        String localVarPath = "/job_titles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createJobTitleValidateBeforeCall(CreateJobTitle createJobTitle, final ApiCallback _callback) throws ApiException {
        return createJobTitleCall(createJobTitle, _callback);

    }


    private ApiResponse<JobsInfoCreateJobTitleResponse> createJobTitleWithHttpInfo(CreateJobTitle createJobTitle) throws ApiException {
        okhttp3.Call localVarCall = createJobTitleValidateBeforeCall(createJobTitle, null);
        Type localVarReturnType = new TypeToken<JobsInfoCreateJobTitleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createJobTitleAsync(CreateJobTitle createJobTitle, final ApiCallback<JobsInfoCreateJobTitleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createJobTitleValidateBeforeCall(createJobTitle, _callback);
        Type localVarReturnType = new TypeToken<JobsInfoCreateJobTitleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateJobTitleRequestBuilder {
        private final List<CreateJobTitlePayload> jobTitles;

        private CreateJobTitleRequestBuilder(List<CreateJobTitlePayload> jobTitles) {
            this.jobTitles = jobTitles;
        }

        /**
         * Build call for createJobTitle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateJobTitle createJobTitle = buildBodyParams();
            return createJobTitleCall(createJobTitle, _callback);
        }

        private CreateJobTitle buildBodyParams() {
            CreateJobTitle createJobTitle = new CreateJobTitle();
            createJobTitle.jobTitles(this.jobTitles);
            return createJobTitle;
        }

        /**
         * Execute createJobTitle request
         * @return JobsInfoCreateJobTitleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
         </table>
         */
        public JobsInfoCreateJobTitleResponse execute() throws ApiException {
            CreateJobTitle createJobTitle = buildBodyParams();
            ApiResponse<JobsInfoCreateJobTitleResponse> localVarResp = createJobTitleWithHttpInfo(createJobTitle);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createJobTitle request with HTTP info returned
         * @return ApiResponse&lt;JobsInfoCreateJobTitleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobsInfoCreateJobTitleResponse> executeWithHttpInfo() throws ApiException {
            CreateJobTitle createJobTitle = buildBodyParams();
            return createJobTitleWithHttpInfo(createJobTitle);
        }

        /**
         * Execute createJobTitle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobsInfoCreateJobTitleResponse> _callback) throws ApiException {
            CreateJobTitle createJobTitle = buildBodyParams();
            return createJobTitleAsync(createJobTitle, _callback);
        }
    }

    /**
     * Create a Job Title
     * Creates a job title.  Use the #endpoint:xfyRRDnWE32d5PNBZ endpoint to get a list of job tiers, whose &lt;code&gt;id&lt;/code&gt; is used to populate the value for the &lt;code&gt;parent&lt;/code&gt; (job tier) key in the request body.
     * @return CreateJobTitleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateJobTitleRequestBuilder createJobTitle(List<CreateJobTitlePayload> jobTitles) throws IllegalArgumentException {
        if (jobTitles == null) throw new IllegalArgumentException("\"jobTitles\" is required but got null");
        return new CreateJobTitleRequestBuilder(jobTitles);
    }
    private okhttp3.Call getAllJobTiersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job_tiers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllJobTiersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllJobTiersCall(_callback);

    }


    private ApiResponse<JobsInfoGetAllJobTiersResponse> getAllJobTiersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllJobTiersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<JobsInfoGetAllJobTiersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllJobTiersAsync(final ApiCallback<JobsInfoGetAllJobTiersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllJobTiersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<JobsInfoGetAllJobTiersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllJobTiersRequestBuilder {

        private GetAllJobTiersRequestBuilder() {
        }

        /**
         * Build call for getAllJobTiers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllJobTiersCall(_callback);
        }


        /**
         * Execute getAllJobTiers request
         * @return JobsInfoGetAllJobTiersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public JobsInfoGetAllJobTiersResponse execute() throws ApiException {
            ApiResponse<JobsInfoGetAllJobTiersResponse> localVarResp = getAllJobTiersWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllJobTiers request with HTTP info returned
         * @return ApiResponse&lt;JobsInfoGetAllJobTiersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobsInfoGetAllJobTiersResponse> executeWithHttpInfo() throws ApiException {
            return getAllJobTiersWithHttpInfo();
        }

        /**
         * Execute getAllJobTiers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobsInfoGetAllJobTiersResponse> _callback) throws ApiException {
            return getAllJobTiersAsync(_callback);
        }
    }

    /**
     * Get all Job Tiers
     * Returns an array of all job tiers. Each job tier can have zero to many linked job titles (while each job title must have one and only one linked job tier).
     * @return GetAllJobTiersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetAllJobTiersRequestBuilder getAllJobTiers() throws IllegalArgumentException {
        return new GetAllJobTiersRequestBuilder();
    }
    private okhttp3.Call getAllJobTitlesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job_titles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllJobTitlesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllJobTitlesCall(_callback);

    }


    private ApiResponse<JobsInfoGetAllJobTitlesResponse> getAllJobTitlesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllJobTitlesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<JobsInfoGetAllJobTitlesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllJobTitlesAsync(final ApiCallback<JobsInfoGetAllJobTitlesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllJobTitlesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<JobsInfoGetAllJobTitlesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllJobTitlesRequestBuilder {

        private GetAllJobTitlesRequestBuilder() {
        }

        /**
         * Build call for getAllJobTitles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllJobTitlesCall(_callback);
        }


        /**
         * Execute getAllJobTitles request
         * @return JobsInfoGetAllJobTitlesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public JobsInfoGetAllJobTitlesResponse execute() throws ApiException {
            ApiResponse<JobsInfoGetAllJobTitlesResponse> localVarResp = getAllJobTitlesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllJobTitles request with HTTP info returned
         * @return ApiResponse&lt;JobsInfoGetAllJobTitlesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobsInfoGetAllJobTitlesResponse> executeWithHttpInfo() throws ApiException {
            return getAllJobTitlesWithHttpInfo();
        }

        /**
         * Execute getAllJobTitles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobsInfoGetAllJobTitlesResponse> _callback) throws ApiException {
            return getAllJobTitlesAsync(_callback);
        }
    }

    /**
     * Get all Job Titles
     * Returns all job titles. Each job title must have one and only one linked job tier (and each job tier can have zero to many linked job titles).  When using the #endpoint:K6iFb2x6z2yTM9jev endpoint, the API user must either use the &lt;code&gt;title&lt;/code&gt; or &lt;code&gt;id&lt;/code&gt; of a &lt;code&gt;job_title&lt;/code&gt;.
     * @return GetAllJobTitlesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetAllJobTitlesRequestBuilder getAllJobTitles() throws IllegalArgumentException {
        return new GetAllJobTitlesRequestBuilder();
    }
    private okhttp3.Call getJobTierCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job_tiers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobTierValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getJobTier(Async)");
        }

        return getJobTierCall(id, _callback);

    }


    private ApiResponse<JobsInfoGetJobTierResponse> getJobTierWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getJobTierValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<JobsInfoGetJobTierResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJobTierAsync(String id, final ApiCallback<JobsInfoGetJobTierResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobTierValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<JobsInfoGetJobTierResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJobTierRequestBuilder {
        private final String id;

        private GetJobTierRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getJobTier
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJobTierCall(id, _callback);
        }


        /**
         * Execute getJobTier request
         * @return JobsInfoGetJobTierResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public JobsInfoGetJobTierResponse execute() throws ApiException {
            ApiResponse<JobsInfoGetJobTierResponse> localVarResp = getJobTierWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJobTier request with HTTP info returned
         * @return ApiResponse&lt;JobsInfoGetJobTierResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobsInfoGetJobTierResponse> executeWithHttpInfo() throws ApiException {
            return getJobTierWithHttpInfo(id);
        }

        /**
         * Execute getJobTier request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobsInfoGetJobTierResponse> _callback) throws ApiException {
            return getJobTierAsync(id, _callback);
        }
    }

    /**
     * Get a Job Tier
     * Returns information about a single job tier.
     * @param id &lt;code&gt;id&lt;/code&gt; of the job tier you want to view (required)
     * @return GetJobTierRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetJobTierRequestBuilder getJobTier(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetJobTierRequestBuilder(id);
    }
    private okhttp3.Call getJobTitleByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job_titles/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobTitleByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getJobTitleById(Async)");
        }

        return getJobTitleByIdCall(id, _callback);

    }


    private ApiResponse<JobsInfoGetJobTitleByIdResponse> getJobTitleByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getJobTitleByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<JobsInfoGetJobTitleByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJobTitleByIdAsync(String id, final ApiCallback<JobsInfoGetJobTitleByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobTitleByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<JobsInfoGetJobTitleByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJobTitleByIdRequestBuilder {
        private final String id;

        private GetJobTitleByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getJobTitleById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJobTitleByIdCall(id, _callback);
        }


        /**
         * Execute getJobTitleById request
         * @return JobsInfoGetJobTitleByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public JobsInfoGetJobTitleByIdResponse execute() throws ApiException {
            ApiResponse<JobsInfoGetJobTitleByIdResponse> localVarResp = getJobTitleByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJobTitleById request with HTTP info returned
         * @return ApiResponse&lt;JobsInfoGetJobTitleByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobsInfoGetJobTitleByIdResponse> executeWithHttpInfo() throws ApiException {
            return getJobTitleByIdWithHttpInfo(id);
        }

        /**
         * Execute getJobTitleById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobsInfoGetJobTitleByIdResponse> _callback) throws ApiException {
            return getJobTitleByIdAsync(id, _callback);
        }
    }

    /**
     * Get a Job Title
     * Returns information about a single Job Title..  When using the #endpoint:K6iFb2x6z2yTM9jev endpoint, the API user must either use the &lt;code&gt;title&lt;/code&gt; or &lt;code&gt;id&lt;/code&gt; of a &lt;code&gt;job_title&lt;/code&gt;.
     * @param id id of the job title you want to view (required)
     * @return GetJobTitleByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetJobTitleByIdRequestBuilder getJobTitleById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetJobTitleByIdRequestBuilder(id);
    }
    private okhttp3.Call updateJobTitleCall(String id, UpdateJobTitle updateJobTitle, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateJobTitle;

        // create path and map variables
        String localVarPath = "/job_titles/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateJobTitleValidateBeforeCall(String id, UpdateJobTitle updateJobTitle, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateJobTitle(Async)");
        }

        return updateJobTitleCall(id, updateJobTitle, _callback);

    }


    private ApiResponse<JobsInfoUpdateJobTitleResponse> updateJobTitleWithHttpInfo(String id, UpdateJobTitle updateJobTitle) throws ApiException {
        okhttp3.Call localVarCall = updateJobTitleValidateBeforeCall(id, updateJobTitle, null);
        Type localVarReturnType = new TypeToken<JobsInfoUpdateJobTitleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateJobTitleAsync(String id, UpdateJobTitle updateJobTitle, final ApiCallback<JobsInfoUpdateJobTitleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateJobTitleValidateBeforeCall(id, updateJobTitle, _callback);
        Type localVarReturnType = new TypeToken<JobsInfoUpdateJobTitleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateJobTitleRequestBuilder {
        private final List<UpdateJobTitlePayload> jobTitles;
        private final String id;

        private UpdateJobTitleRequestBuilder(List<UpdateJobTitlePayload> jobTitles, String id) {
            this.jobTitles = jobTitles;
            this.id = id;
        }

        /**
         * Build call for updateJobTitle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateJobTitle updateJobTitle = buildBodyParams();
            return updateJobTitleCall(id, updateJobTitle, _callback);
        }

        private UpdateJobTitle buildBodyParams() {
            UpdateJobTitle updateJobTitle = new UpdateJobTitle();
            updateJobTitle.jobTitles(this.jobTitles);
            return updateJobTitle;
        }

        /**
         * Execute updateJobTitle request
         * @return JobsInfoUpdateJobTitleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public JobsInfoUpdateJobTitleResponse execute() throws ApiException {
            UpdateJobTitle updateJobTitle = buildBodyParams();
            ApiResponse<JobsInfoUpdateJobTitleResponse> localVarResp = updateJobTitleWithHttpInfo(id, updateJobTitle);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateJobTitle request with HTTP info returned
         * @return ApiResponse&lt;JobsInfoUpdateJobTitleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobsInfoUpdateJobTitleResponse> executeWithHttpInfo() throws ApiException {
            UpdateJobTitle updateJobTitle = buildBodyParams();
            return updateJobTitleWithHttpInfo(id, updateJobTitle);
        }

        /**
         * Execute updateJobTitle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobsInfoUpdateJobTitleResponse> _callback) throws ApiException {
            UpdateJobTitle updateJobTitle = buildBodyParams();
            return updateJobTitleAsync(id, updateJobTitle, _callback);
        }
    }

    /**
     * Update a Job Title
     * Updates the label and/or parent (job tier) of a job title.  Use the #endpoint:xfyRRDnWE32d5PNBZ endpoint to get a list of job tiers, whose &lt;code&gt;id&lt;/code&gt; is used to populate the value for the &lt;code&gt;parent&lt;/code&gt; (job tier) key in the request body.   If not updating the &lt;code&gt;parent&lt;/code&gt;, use the &lt;code&gt;id&lt;/code&gt; of the current &lt;code&gt;parent&lt;/code&gt; value; if not updating the &lt;code&gt;title&lt;/code&gt;, use the current job title &lt;code&gt;title&lt;/code&gt;.
     * @param id id of the job title you want to view (required)
     * @return UpdateJobTitleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateJobTitleRequestBuilder updateJobTitle(List<UpdateJobTitlePayload> jobTitles, String id) throws IllegalArgumentException {
        if (jobTitles == null) throw new IllegalArgumentException("\"jobTitles\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateJobTitleRequestBuilder(jobTitles, id);
    }
    private okhttp3.Call updateLabelCall(String id, UpdateJobTier updateJobTier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateJobTier;

        // create path and map variables
        String localVarPath = "/job_tiers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLabelValidateBeforeCall(String id, UpdateJobTier updateJobTier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateLabel(Async)");
        }

        return updateLabelCall(id, updateJobTier, _callback);

    }


    private ApiResponse<JobsInfoUpdateLabelResponse> updateLabelWithHttpInfo(String id, UpdateJobTier updateJobTier) throws ApiException {
        okhttp3.Call localVarCall = updateLabelValidateBeforeCall(id, updateJobTier, null);
        Type localVarReturnType = new TypeToken<JobsInfoUpdateLabelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateLabelAsync(String id, UpdateJobTier updateJobTier, final ApiCallback<JobsInfoUpdateLabelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLabelValidateBeforeCall(id, updateJobTier, _callback);
        Type localVarReturnType = new TypeToken<JobsInfoUpdateLabelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateLabelRequestBuilder {
        private final List<UpdateJobTierPayload> jobTiers;
        private final String id;

        private UpdateLabelRequestBuilder(List<UpdateJobTierPayload> jobTiers, String id) {
            this.jobTiers = jobTiers;
            this.id = id;
        }

        /**
         * Build call for updateLabel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateJobTier updateJobTier = buildBodyParams();
            return updateLabelCall(id, updateJobTier, _callback);
        }

        private UpdateJobTier buildBodyParams() {
            UpdateJobTier updateJobTier = new UpdateJobTier();
            updateJobTier.jobTiers(this.jobTiers);
            return updateJobTier;
        }

        /**
         * Execute updateLabel request
         * @return JobsInfoUpdateLabelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public JobsInfoUpdateLabelResponse execute() throws ApiException {
            UpdateJobTier updateJobTier = buildBodyParams();
            ApiResponse<JobsInfoUpdateLabelResponse> localVarResp = updateLabelWithHttpInfo(id, updateJobTier);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateLabel request with HTTP info returned
         * @return ApiResponse&lt;JobsInfoUpdateLabelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobsInfoUpdateLabelResponse> executeWithHttpInfo() throws ApiException {
            UpdateJobTier updateJobTier = buildBodyParams();
            return updateLabelWithHttpInfo(id, updateJobTier);
        }

        /**
         * Execute updateLabel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobsInfoUpdateLabelResponse> _callback) throws ApiException {
            UpdateJobTier updateJobTier = buildBodyParams();
            return updateLabelAsync(id, updateJobTier, _callback);
        }
    }

    /**
     * Update a Job Tier
     * Updates the label of a job tier.  Use the #endpoint:3iHo6fSyKNs2dsaSC endpoint to get a list of job tiers, whose &lt;code&gt;id&lt;/code&gt; is used in the path parameters.
     * @param id &lt;code&gt;id&lt;/code&gt; of the job tier you want to view (required)
     * @return UpdateLabelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLabelRequestBuilder updateLabel(List<UpdateJobTierPayload> jobTiers, String id) throws IllegalArgumentException {
        if (jobTiers == null) throw new IllegalArgumentException("\"jobTiers\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateLabelRequestBuilder(jobTiers, id);
    }
}
