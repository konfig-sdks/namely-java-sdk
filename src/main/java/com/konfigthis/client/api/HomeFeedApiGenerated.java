/*
 * Namely API
 * Move your app forward with the Namely API Move your app forward with the Namely API
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateComment;
import com.konfigthis.client.model.CreateCommentPayload;
import com.konfigthis.client.model.CreateEvent;
import com.konfigthis.client.model.CreateEventPayload;
import com.konfigthis.client.model.DeleteLike;
import com.konfigthis.client.model.DeleteLikePayload;
import com.konfigthis.client.model.GetEventsResponse;
import com.konfigthis.client.model.HomeFeedCreateEventCommentResponse;
import com.konfigthis.client.model.HomeFeedCreateEventLikeResponse;
import com.konfigthis.client.model.HomeFeedDeleteAnnouncementResponse;
import com.konfigthis.client.model.HomeFeedDeleteEventCommentLikeResponse;
import com.konfigthis.client.model.HomeFeedGetEventCommentLikesResponse;
import com.konfigthis.client.model.HomeFeedGetEventCommentsResponse;
import com.konfigthis.client.model.HomeFeedGetEventLikesResponse;
import com.konfigthis.client.model.HomeFeedGetEventResponse;
import com.konfigthis.client.model.HomeFeedRemoveEventCommentResponse;
import com.konfigthis.client.model.HomeFeedRemoveEventLikeResponse;
import com.konfigthis.client.model.PostEventsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class HomeFeedApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HomeFeedApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public HomeFeedApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createEventCommentCall(String id, CreateComment createComment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createComment;

        // create path and map variables
        String localVarPath = "/events/{id}/comments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEventCommentValidateBeforeCall(String id, CreateComment createComment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createEventComment(Async)");
        }

        return createEventCommentCall(id, createComment, _callback);

    }


    private ApiResponse<HomeFeedCreateEventCommentResponse> createEventCommentWithHttpInfo(String id, CreateComment createComment) throws ApiException {
        okhttp3.Call localVarCall = createEventCommentValidateBeforeCall(id, createComment, null);
        Type localVarReturnType = new TypeToken<HomeFeedCreateEventCommentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEventCommentAsync(String id, CreateComment createComment, final ApiCallback<HomeFeedCreateEventCommentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEventCommentValidateBeforeCall(id, createComment, _callback);
        Type localVarReturnType = new TypeToken<HomeFeedCreateEventCommentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEventCommentRequestBuilder {
        private final List<CreateCommentPayload> comments;
        private final String id;

        private CreateEventCommentRequestBuilder(List<CreateCommentPayload> comments, String id) {
            this.comments = comments;
            this.id = id;
        }

        /**
         * Build call for createEventComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateComment createComment = buildBodyParams();
            return createEventCommentCall(id, createComment, _callback);
        }

        private CreateComment buildBodyParams() {
            CreateComment createComment = new CreateComment();
            createComment.comments(this.comments);
            return createComment;
        }

        /**
         * Execute createEventComment request
         * @return HomeFeedCreateEventCommentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Response </td><td>  -  </td></tr>
         </table>
         */
        public HomeFeedCreateEventCommentResponse execute() throws ApiException {
            CreateComment createComment = buildBodyParams();
            ApiResponse<HomeFeedCreateEventCommentResponse> localVarResp = createEventCommentWithHttpInfo(id, createComment);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEventComment request with HTTP info returned
         * @return ApiResponse&lt;HomeFeedCreateEventCommentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeFeedCreateEventCommentResponse> executeWithHttpInfo() throws ApiException {
            CreateComment createComment = buildBodyParams();
            return createEventCommentWithHttpInfo(id, createComment);
        }

        /**
         * Execute createEventComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeFeedCreateEventCommentResponse> _callback) throws ApiException {
            CreateComment createComment = buildBodyParams();
            return createEventCommentAsync(id, createComment, _callback);
        }
    }

    /**
     * Create an Event&#39;s Comment
     * Creates a comment on a particular event.
     * @param id id of event. (required)
     * @return CreateEventCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateEventCommentRequestBuilder createEventComment(List<CreateCommentPayload> comments, String id) throws IllegalArgumentException {
        if (comments == null) throw new IllegalArgumentException("\"comments\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CreateEventCommentRequestBuilder(comments, id);
    }
    private okhttp3.Call createEventLikeCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/likes/event/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEventLikeValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createEventLike(Async)");
        }

        return createEventLikeCall(id, _callback);

    }


    private ApiResponse<HomeFeedCreateEventLikeResponse> createEventLikeWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = createEventLikeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<HomeFeedCreateEventLikeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEventLikeAsync(String id, final ApiCallback<HomeFeedCreateEventLikeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEventLikeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<HomeFeedCreateEventLikeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEventLikeRequestBuilder {
        private final String id;

        private CreateEventLikeRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for createEventLike
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createEventLikeCall(id, _callback);
        }


        /**
         * Execute createEventLike request
         * @return HomeFeedCreateEventLikeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
         </table>
         */
        public HomeFeedCreateEventLikeResponse execute() throws ApiException {
            ApiResponse<HomeFeedCreateEventLikeResponse> localVarResp = createEventLikeWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEventLike request with HTTP info returned
         * @return ApiResponse&lt;HomeFeedCreateEventLikeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeFeedCreateEventLikeResponse> executeWithHttpInfo() throws ApiException {
            return createEventLikeWithHttpInfo(id);
        }

        /**
         * Execute createEventLike request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeFeedCreateEventLikeResponse> _callback) throws ApiException {
            return createEventLikeAsync(id, _callback);
        }
    }

    /**
     * Create an Event&#39;s Like
     * Like a particular event simply by &#x60;POST&#x60;ing to the endpoint with its &lt;code&gt;id&lt;/code&gt; in the path parameters.
     * @param id &lt;code&gt;id&lt;/code&gt; of the event you want to like (required)
     * @return CreateEventLikeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public CreateEventLikeRequestBuilder createEventLike(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CreateEventLikeRequestBuilder(id);
    }
    private okhttp3.Call deleteAnnouncementCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAnnouncementValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAnnouncement(Async)");
        }

        return deleteAnnouncementCall(id, _callback);

    }


    private ApiResponse<HomeFeedDeleteAnnouncementResponse> deleteAnnouncementWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteAnnouncementValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<HomeFeedDeleteAnnouncementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAnnouncementAsync(String id, final ApiCallback<HomeFeedDeleteAnnouncementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAnnouncementValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<HomeFeedDeleteAnnouncementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteAnnouncementRequestBuilder {
        private final String id;

        private DeleteAnnouncementRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteAnnouncement
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAnnouncementCall(id, _callback);
        }


        /**
         * Execute deleteAnnouncement request
         * @return HomeFeedDeleteAnnouncementResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public HomeFeedDeleteAnnouncementResponse execute() throws ApiException {
            ApiResponse<HomeFeedDeleteAnnouncementResponse> localVarResp = deleteAnnouncementWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteAnnouncement request with HTTP info returned
         * @return ApiResponse&lt;HomeFeedDeleteAnnouncementResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeFeedDeleteAnnouncementResponse> executeWithHttpInfo() throws ApiException {
            return deleteAnnouncementWithHttpInfo(id);
        }

        /**
         * Execute deleteAnnouncement request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeFeedDeleteAnnouncementResponse> _callback) throws ApiException {
            return deleteAnnouncementAsync(id, _callback);
        }
    }

    /**
     * Delete an Announcement
     * Delete a particular event.
     * @param id id of event. (required)
     * @return DeleteAnnouncementRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAnnouncementRequestBuilder deleteAnnouncement(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteAnnouncementRequestBuilder(id);
    }
    private okhttp3.Call deleteEventCommentLikeCall(String commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/likes/event_comment/{comment-id}"
            .replace("{" + "comment-id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEventCommentLikeValidateBeforeCall(String commentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling deleteEventCommentLike(Async)");
        }

        return deleteEventCommentLikeCall(commentId, _callback);

    }


    private ApiResponse<HomeFeedDeleteEventCommentLikeResponse> deleteEventCommentLikeWithHttpInfo(String commentId) throws ApiException {
        okhttp3.Call localVarCall = deleteEventCommentLikeValidateBeforeCall(commentId, null);
        Type localVarReturnType = new TypeToken<HomeFeedDeleteEventCommentLikeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteEventCommentLikeAsync(String commentId, final ApiCallback<HomeFeedDeleteEventCommentLikeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEventCommentLikeValidateBeforeCall(commentId, _callback);
        Type localVarReturnType = new TypeToken<HomeFeedDeleteEventCommentLikeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteEventCommentLikeRequestBuilder {
        private final String commentId;

        private DeleteEventCommentLikeRequestBuilder(String commentId) {
            this.commentId = commentId;
        }

        /**
         * Build call for deleteEventCommentLike
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEventCommentLikeCall(commentId, _callback);
        }


        /**
         * Execute deleteEventCommentLike request
         * @return HomeFeedDeleteEventCommentLikeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public HomeFeedDeleteEventCommentLikeResponse execute() throws ApiException {
            ApiResponse<HomeFeedDeleteEventCommentLikeResponse> localVarResp = deleteEventCommentLikeWithHttpInfo(commentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteEventCommentLike request with HTTP info returned
         * @return ApiResponse&lt;HomeFeedDeleteEventCommentLikeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeFeedDeleteEventCommentLikeResponse> executeWithHttpInfo() throws ApiException {
            return deleteEventCommentLikeWithHttpInfo(commentId);
        }

        /**
         * Execute deleteEventCommentLike request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeFeedDeleteEventCommentLikeResponse> _callback) throws ApiException {
            return deleteEventCommentLikeAsync(commentId, _callback);
        }
    }

    /**
     * Delete an Event&#39;s Comment&#39;s Like
     * Delete your like from a particular comment. You can only delete your own like (from the profile related to the token).
     * @param commentId &lt;code&gt;id&lt;/code&gt; of the comment you want to like (required)
     * @return DeleteEventCommentLikeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEventCommentLikeRequestBuilder deleteEventCommentLike(String commentId) throws IllegalArgumentException {
        if (commentId == null) throw new IllegalArgumentException("\"commentId\" is required but got null");
            

        return new DeleteEventCommentLikeRequestBuilder(commentId);
    }
    private okhttp3.Call eventsCall(Integer limit, String after, String filterType, String profileId, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (filterType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[type]", filterType));
        }

        if (profileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("profile_id", profileId));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsValidateBeforeCall(Integer limit, String after, String filterType, String profileId, String order, final ApiCallback _callback) throws ApiException {
        return eventsCall(limit, after, filterType, profileId, order, _callback);

    }


    private ApiResponse<GetEventsResponse> eventsWithHttpInfo(Integer limit, String after, String filterType, String profileId, String order) throws ApiException {
        okhttp3.Call localVarCall = eventsValidateBeforeCall(limit, after, filterType, profileId, order, null);
        Type localVarReturnType = new TypeToken<GetEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call eventsAsync(Integer limit, String after, String filterType, String profileId, String order, final ApiCallback<GetEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsValidateBeforeCall(limit, after, filterType, profileId, order, _callback);
        Type localVarReturnType = new TypeToken<GetEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EventsRequestBuilder {
        private Integer limit;
        private String after;
        private String filterType;
        private String profileId;
        private String order;

        private EventsRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Limit of records to be retrieved (optional)
         * @return EventsRequestBuilder
         */
        public EventsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set after
         * @param after &lt;code&gt;id&lt;/code&gt; of the first record BEFORE the events you want to retrieve (optional)
         * @return EventsRequestBuilder
         */
        public EventsRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set filterType
         * @param filterType The type of event you want to retrieve; examples include &#x60;birthday&#x60;, &#x60;announcement&#x60;, &#x60;recent_arrival&#x60; or &#x60;anniversary&#x60; (optional)
         * @return EventsRequestBuilder
         */
        public EventsRequestBuilder filterType(String filterType) {
            this.filterType = filterType;
            return this;
        }
        
        /**
         * Set profileId
         * @param profileId &lt;code&gt;id&lt;/code&gt; of the profile that you wish to pull all associated events from (optional)
         * @return EventsRequestBuilder
         */
        public EventsRequestBuilder profileId(String profileId) {
            this.profileId = profileId;
            return this;
        }
        
        /**
         * Set order
         * @param order This parameter allows you to change how results are ordered. Valid values are &#x60;asc&#x60; and &#x60;desc&#x60; - It defaults to &#x60;desc&#x60; (optional)
         * @return EventsRequestBuilder
         */
        public EventsRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for events
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return eventsCall(limit, after, filterType, profileId, order, _callback);
        }


        /**
         * Execute events request
         * @return GetEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public GetEventsResponse execute() throws ApiException {
            ApiResponse<GetEventsResponse> localVarResp = eventsWithHttpInfo(limit, after, filterType, profileId, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute events request with HTTP info returned
         * @return ApiResponse&lt;GetEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetEventsResponse> executeWithHttpInfo() throws ApiException {
            return eventsWithHttpInfo(limit, after, filterType, profileId, order);
        }

        /**
         * Execute events request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetEventsResponse> _callback) throws ApiException {
            return eventsAsync(limit, after, filterType, profileId, order, _callback);
        }
    }

    /**
     * Get all Events
     * Returns all events, paginated. Linked to the event is an array of any profiles that commented on the event. Only events associated with the profiles of active employees are eligible to appear.
     * @return EventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public EventsRequestBuilder events() throws IllegalArgumentException {
        return new EventsRequestBuilder();
    }
    private okhttp3.Call events_0Call(CreateEvent createEvent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEvent;

        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call events_0ValidateBeforeCall(CreateEvent createEvent, final ApiCallback _callback) throws ApiException {
        return events_0Call(createEvent, _callback);

    }


    private ApiResponse<PostEventsResponse> events_0WithHttpInfo(CreateEvent createEvent) throws ApiException {
        okhttp3.Call localVarCall = events_0ValidateBeforeCall(createEvent, null);
        Type localVarReturnType = new TypeToken<PostEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call events_0Async(CreateEvent createEvent, final ApiCallback<PostEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = events_0ValidateBeforeCall(createEvent, _callback);
        Type localVarReturnType = new TypeToken<PostEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Events0RequestBuilder {
        private final List<CreateEventPayload> events;

        private Events0RequestBuilder(List<CreateEventPayload> events) {
            this.events = events;
        }

        /**
         * Build call for events_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateEvent createEvent = buildBodyParams();
            return events_0Call(createEvent, _callback);
        }

        private CreateEvent buildBodyParams() {
            CreateEvent createEvent = new CreateEvent();
            createEvent.events(this.events);
            return createEvent;
        }

        /**
         * Execute events_0 request
         * @return PostEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
         </table>
         */
        public PostEventsResponse execute() throws ApiException {
            CreateEvent createEvent = buildBodyParams();
            ApiResponse<PostEventsResponse> localVarResp = events_0WithHttpInfo(createEvent);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute events_0 request with HTTP info returned
         * @return ApiResponse&lt;PostEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PostEventsResponse> executeWithHttpInfo() throws ApiException {
            CreateEvent createEvent = buildBodyParams();
            return events_0WithHttpInfo(createEvent);
        }

        /**
         * Execute events_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PostEventsResponse> _callback) throws ApiException {
            CreateEvent createEvent = buildBodyParams();
            return events_0Async(createEvent, _callback);
        }
    }

    /**
     * Create an Announcement
     * Creates an announcement. Other event types are auto-generated and cannot be manually created.  The file parameters allow you to include a file which is located in the announcement. As with uploading a file to a profile, the file must be previously uploaded via the &#x60;file create&#x60; endpoint.
     * @return Events0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create Response </td><td>  -  </td></tr>
     </table>
     */
    public Events0RequestBuilder events_0(List<CreateEventPayload> events) throws IllegalArgumentException {
        if (events == null) throw new IllegalArgumentException("\"events\" is required but got null");
        return new Events0RequestBuilder(events);
    }
    private okhttp3.Call getEventCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEvent(Async)");
        }

        return getEventCall(id, _callback);

    }


    private ApiResponse<HomeFeedGetEventResponse> getEventWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getEventValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<HomeFeedGetEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventAsync(String id, final ApiCallback<HomeFeedGetEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<HomeFeedGetEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventRequestBuilder {
        private final String id;

        private GetEventRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventCall(id, _callback);
        }


        /**
         * Execute getEvent request
         * @return HomeFeedGetEventResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public HomeFeedGetEventResponse execute() throws ApiException {
            ApiResponse<HomeFeedGetEventResponse> localVarResp = getEventWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEvent request with HTTP info returned
         * @return ApiResponse&lt;HomeFeedGetEventResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeFeedGetEventResponse> executeWithHttpInfo() throws ApiException {
            return getEventWithHttpInfo(id);
        }

        /**
         * Execute getEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeFeedGetEventResponse> _callback) throws ApiException {
            return getEventAsync(id, _callback);
        }
    }

    /**
     * Get an Event
     * Returns information about a single event.
     * @param id id of event. (required)
     * @return GetEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetEventRequestBuilder getEvent(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetEventRequestBuilder(id);
    }
    private okhttp3.Call getEventCommentLikesCall(String commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/likes/event_comment/{comment-id}/recent"
            .replace("{" + "comment-id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventCommentLikesValidateBeforeCall(String commentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling getEventCommentLikes(Async)");
        }

        return getEventCommentLikesCall(commentId, _callback);

    }


    private ApiResponse<HomeFeedGetEventCommentLikesResponse> getEventCommentLikesWithHttpInfo(String commentId) throws ApiException {
        okhttp3.Call localVarCall = getEventCommentLikesValidateBeforeCall(commentId, null);
        Type localVarReturnType = new TypeToken<HomeFeedGetEventCommentLikesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventCommentLikesAsync(String commentId, final ApiCallback<HomeFeedGetEventCommentLikesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventCommentLikesValidateBeforeCall(commentId, _callback);
        Type localVarReturnType = new TypeToken<HomeFeedGetEventCommentLikesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventCommentLikesRequestBuilder {
        private final String commentId;

        private GetEventCommentLikesRequestBuilder(String commentId) {
            this.commentId = commentId;
        }

        /**
         * Build call for getEventCommentLikes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventCommentLikesCall(commentId, _callback);
        }


        /**
         * Execute getEventCommentLikes request
         * @return HomeFeedGetEventCommentLikesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public HomeFeedGetEventCommentLikesResponse execute() throws ApiException {
            ApiResponse<HomeFeedGetEventCommentLikesResponse> localVarResp = getEventCommentLikesWithHttpInfo(commentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEventCommentLikes request with HTTP info returned
         * @return ApiResponse&lt;HomeFeedGetEventCommentLikesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeFeedGetEventCommentLikesResponse> executeWithHttpInfo() throws ApiException {
            return getEventCommentLikesWithHttpInfo(commentId);
        }

        /**
         * Execute getEventCommentLikes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeFeedGetEventCommentLikesResponse> _callback) throws ApiException {
            return getEventCommentLikesAsync(commentId, _callback);
        }
    }

    /**
     * Get an Event&#39;s Comment&#39;s Likes
     * Returns a list of profiles that liked a particular comment on a particular event.
     * @param commentId &lt;code&gt;id&lt;/code&gt; of the comment whose likes you want to view (required)
     * @return GetEventCommentLikesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetEventCommentLikesRequestBuilder getEventCommentLikes(String commentId) throws IllegalArgumentException {
        if (commentId == null) throw new IllegalArgumentException("\"commentId\" is required but got null");
            

        return new GetEventCommentLikesRequestBuilder(commentId);
    }
    private okhttp3.Call getEventCommentsCall(String eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{event-id}/comments"
            .replace("{" + "event-id" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventCommentsValidateBeforeCall(String eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getEventComments(Async)");
        }

        return getEventCommentsCall(eventId, _callback);

    }


    private ApiResponse<HomeFeedGetEventCommentsResponse> getEventCommentsWithHttpInfo(String eventId) throws ApiException {
        okhttp3.Call localVarCall = getEventCommentsValidateBeforeCall(eventId, null);
        Type localVarReturnType = new TypeToken<HomeFeedGetEventCommentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventCommentsAsync(String eventId, final ApiCallback<HomeFeedGetEventCommentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventCommentsValidateBeforeCall(eventId, _callback);
        Type localVarReturnType = new TypeToken<HomeFeedGetEventCommentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventCommentsRequestBuilder {
        private final String eventId;

        private GetEventCommentsRequestBuilder(String eventId) {
            this.eventId = eventId;
        }

        /**
         * Build call for getEventComments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventCommentsCall(eventId, _callback);
        }


        /**
         * Execute getEventComments request
         * @return HomeFeedGetEventCommentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public HomeFeedGetEventCommentsResponse execute() throws ApiException {
            ApiResponse<HomeFeedGetEventCommentsResponse> localVarResp = getEventCommentsWithHttpInfo(eventId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEventComments request with HTTP info returned
         * @return ApiResponse&lt;HomeFeedGetEventCommentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeFeedGetEventCommentsResponse> executeWithHttpInfo() throws ApiException {
            return getEventCommentsWithHttpInfo(eventId);
        }

        /**
         * Execute getEventComments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeFeedGetEventCommentsResponse> _callback) throws ApiException {
            return getEventCommentsAsync(eventId, _callback);
        }
    }

    /**
     * Get an Event&#39;s Comments
     * Returns all comments associated with a particular event.
     * @param eventId &lt;code&gt;id&lt;/code&gt; of the event whose comments you want to view (required)
     * @return GetEventCommentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetEventCommentsRequestBuilder getEventComments(String eventId) throws IllegalArgumentException {
        if (eventId == null) throw new IllegalArgumentException("\"eventId\" is required but got null");
            

        return new GetEventCommentsRequestBuilder(eventId);
    }
    private okhttp3.Call getEventLikesCall(String eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/likes/event/{event-id}/recent"
            .replace("{" + "event-id" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventLikesValidateBeforeCall(String eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getEventLikes(Async)");
        }

        return getEventLikesCall(eventId, _callback);

    }


    private ApiResponse<HomeFeedGetEventLikesResponse> getEventLikesWithHttpInfo(String eventId) throws ApiException {
        okhttp3.Call localVarCall = getEventLikesValidateBeforeCall(eventId, null);
        Type localVarReturnType = new TypeToken<HomeFeedGetEventLikesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventLikesAsync(String eventId, final ApiCallback<HomeFeedGetEventLikesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventLikesValidateBeforeCall(eventId, _callback);
        Type localVarReturnType = new TypeToken<HomeFeedGetEventLikesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventLikesRequestBuilder {
        private final String eventId;

        private GetEventLikesRequestBuilder(String eventId) {
            this.eventId = eventId;
        }

        /**
         * Build call for getEventLikes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventLikesCall(eventId, _callback);
        }


        /**
         * Execute getEventLikes request
         * @return HomeFeedGetEventLikesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public HomeFeedGetEventLikesResponse execute() throws ApiException {
            ApiResponse<HomeFeedGetEventLikesResponse> localVarResp = getEventLikesWithHttpInfo(eventId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEventLikes request with HTTP info returned
         * @return ApiResponse&lt;HomeFeedGetEventLikesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeFeedGetEventLikesResponse> executeWithHttpInfo() throws ApiException {
            return getEventLikesWithHttpInfo(eventId);
        }

        /**
         * Execute getEventLikes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeFeedGetEventLikesResponse> _callback) throws ApiException {
            return getEventLikesAsync(eventId, _callback);
        }
    }

    /**
     * Get an Event&#39;s Likes
     * Returns a list of profiles that liked a particular event.
     * @param eventId &lt;code&gt;id&lt;/code&gt; of the event whose likes you want to view (required)
     * @return GetEventLikesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetEventLikesRequestBuilder getEventLikes(String eventId) throws IllegalArgumentException {
        if (eventId == null) throw new IllegalArgumentException("\"eventId\" is required but got null");
            

        return new GetEventLikesRequestBuilder(eventId);
    }
    private okhttp3.Call likeEventCommentCall(String commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/likes/event_comment/{comment-id}"
            .replace("{" + "comment-id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call likeEventCommentValidateBeforeCall(String commentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling likeEventComment(Async)");
        }

        return likeEventCommentCall(commentId, _callback);

    }


    private ApiResponse<Object> likeEventCommentWithHttpInfo(String commentId) throws ApiException {
        okhttp3.Call localVarCall = likeEventCommentValidateBeforeCall(commentId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call likeEventCommentAsync(String commentId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = likeEventCommentValidateBeforeCall(commentId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LikeEventCommentRequestBuilder {
        private final String commentId;

        private LikeEventCommentRequestBuilder(String commentId) {
            this.commentId = commentId;
        }

        /**
         * Build call for likeEventComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return likeEventCommentCall(commentId, _callback);
        }


        /**
         * Execute likeEventComment request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = likeEventCommentWithHttpInfo(commentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute likeEventComment request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return likeEventCommentWithHttpInfo(commentId);
        }

        /**
         * Execute likeEventComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return likeEventCommentAsync(commentId, _callback);
        }
    }

    /**
     * Create an Event&#39;s Comment&#39;s Like
     * Like a particular comment simply by &#x60;POST&#x60;ing to the endpoint with its &lt;code&gt;id&lt;/code&gt; in the path parameters.
     * @param commentId &lt;code&gt;id&lt;/code&gt; of the comment you want to like (required)
     * @return LikeEventCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public LikeEventCommentRequestBuilder likeEventComment(String commentId) throws IllegalArgumentException {
        if (commentId == null) throw new IllegalArgumentException("\"commentId\" is required but got null");
            

        return new LikeEventCommentRequestBuilder(commentId);
    }
    private okhttp3.Call removeEventCommentCall(String eventId, String commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{event-id}/comments/{comment-id}"
            .replace("{" + "event-id" + "}", localVarApiClient.escapeString(eventId.toString()))
            .replace("{" + "comment-id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEventCommentValidateBeforeCall(String eventId, String commentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling removeEventComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling removeEventComment(Async)");
        }

        return removeEventCommentCall(eventId, commentId, _callback);

    }


    private ApiResponse<HomeFeedRemoveEventCommentResponse> removeEventCommentWithHttpInfo(String eventId, String commentId) throws ApiException {
        okhttp3.Call localVarCall = removeEventCommentValidateBeforeCall(eventId, commentId, null);
        Type localVarReturnType = new TypeToken<HomeFeedRemoveEventCommentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeEventCommentAsync(String eventId, String commentId, final ApiCallback<HomeFeedRemoveEventCommentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEventCommentValidateBeforeCall(eventId, commentId, _callback);
        Type localVarReturnType = new TypeToken<HomeFeedRemoveEventCommentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveEventCommentRequestBuilder {
        private final String eventId;
        private final String commentId;

        private RemoveEventCommentRequestBuilder(String eventId, String commentId) {
            this.eventId = eventId;
            this.commentId = commentId;
        }

        /**
         * Build call for removeEventComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Succssful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeEventCommentCall(eventId, commentId, _callback);
        }


        /**
         * Execute removeEventComment request
         * @return HomeFeedRemoveEventCommentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Succssful Response </td><td>  -  </td></tr>
         </table>
         */
        public HomeFeedRemoveEventCommentResponse execute() throws ApiException {
            ApiResponse<HomeFeedRemoveEventCommentResponse> localVarResp = removeEventCommentWithHttpInfo(eventId, commentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeEventComment request with HTTP info returned
         * @return ApiResponse&lt;HomeFeedRemoveEventCommentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Succssful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeFeedRemoveEventCommentResponse> executeWithHttpInfo() throws ApiException {
            return removeEventCommentWithHttpInfo(eventId, commentId);
        }

        /**
         * Execute removeEventComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Succssful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeFeedRemoveEventCommentResponse> _callback) throws ApiException {
            return removeEventCommentAsync(eventId, commentId, _callback);
        }
    }

    /**
     * Delete an Event&#39;s Comment
     * Delete a particular comment on an event.
     * @param eventId &lt;code&gt;id&lt;/code&gt; of the event to which the comment belongs (required)
     * @param commentId &lt;code&gt;id&lt;/code&gt; of the comment you want to delete from the event (required)
     * @return RemoveEventCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succssful Response </td><td>  -  </td></tr>
     </table>
     */
    public RemoveEventCommentRequestBuilder removeEventComment(String eventId, String commentId) throws IllegalArgumentException {
        if (eventId == null) throw new IllegalArgumentException("\"eventId\" is required but got null");
            

        if (commentId == null) throw new IllegalArgumentException("\"commentId\" is required but got null");
            

        return new RemoveEventCommentRequestBuilder(eventId, commentId);
    }
    private okhttp3.Call removeEventLikeCall(String eventId, DeleteLike deleteLike, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteLike;

        // create path and map variables
        String localVarPath = "/likes/event/{event-id}"
            .replace("{" + "event-id" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEventLikeValidateBeforeCall(String eventId, DeleteLike deleteLike, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling removeEventLike(Async)");
        }

        return removeEventLikeCall(eventId, deleteLike, _callback);

    }


    private ApiResponse<HomeFeedRemoveEventLikeResponse> removeEventLikeWithHttpInfo(String eventId, DeleteLike deleteLike) throws ApiException {
        okhttp3.Call localVarCall = removeEventLikeValidateBeforeCall(eventId, deleteLike, null);
        Type localVarReturnType = new TypeToken<HomeFeedRemoveEventLikeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeEventLikeAsync(String eventId, DeleteLike deleteLike, final ApiCallback<HomeFeedRemoveEventLikeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEventLikeValidateBeforeCall(eventId, deleteLike, _callback);
        Type localVarReturnType = new TypeToken<HomeFeedRemoveEventLikeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveEventLikeRequestBuilder {
        private final List<DeleteLikePayload> message;
        private final String eventId;

        private RemoveEventLikeRequestBuilder(List<DeleteLikePayload> message, String eventId) {
            this.message = message;
            this.eventId = eventId;
        }

        /**
         * Build call for removeEventLike
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeleteLike deleteLike = buildBodyParams();
            return removeEventLikeCall(eventId, deleteLike, _callback);
        }

        private DeleteLike buildBodyParams() {
            DeleteLike deleteLike = new DeleteLike();
            deleteLike.message(this.message);
            return deleteLike;
        }

        /**
         * Execute removeEventLike request
         * @return HomeFeedRemoveEventLikeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public HomeFeedRemoveEventLikeResponse execute() throws ApiException {
            DeleteLike deleteLike = buildBodyParams();
            ApiResponse<HomeFeedRemoveEventLikeResponse> localVarResp = removeEventLikeWithHttpInfo(eventId, deleteLike);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeEventLike request with HTTP info returned
         * @return ApiResponse&lt;HomeFeedRemoveEventLikeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeFeedRemoveEventLikeResponse> executeWithHttpInfo() throws ApiException {
            DeleteLike deleteLike = buildBodyParams();
            return removeEventLikeWithHttpInfo(eventId, deleteLike);
        }

        /**
         * Execute removeEventLike request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeFeedRemoveEventLikeResponse> _callback) throws ApiException {
            DeleteLike deleteLike = buildBodyParams();
            return removeEventLikeAsync(eventId, deleteLike, _callback);
        }
    }

    /**
     * Delete an Event&#39;s Like
     * Delete a particular like from an event.
     * @param eventId &lt;code&gt;id&lt;/code&gt; of the event from which you want to delete the like (required)
     * @return RemoveEventLikeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public RemoveEventLikeRequestBuilder removeEventLike(List<DeleteLikePayload> message, String eventId) throws IllegalArgumentException {
        if (message == null) throw new IllegalArgumentException("\"message\" is required but got null");
        if (eventId == null) throw new IllegalArgumentException("\"eventId\" is required but got null");
            

        return new RemoveEventLikeRequestBuilder(message, eventId);
    }
}
