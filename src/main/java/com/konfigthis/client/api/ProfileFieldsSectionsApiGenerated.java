/*
 * Namely API
 * Move your app forward with the Namely API Move your app forward with the Namely API
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ProfileFieldsGetAllFieldSectionsResponse;
import com.konfigthis.client.model.ProfileFieldsGetFieldSectionResponse;
import com.konfigthis.client.model.ProfileFieldsUpdateFieldInSection200Response;
import com.konfigthis.client.model.UpdateSection;
import com.konfigthis.client.model.UpdateSectionPayload;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProfileFieldsSectionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProfileFieldsSectionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProfileFieldsSectionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllFieldSectionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profiles/fields/sections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllFieldSectionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllFieldSectionsCall(_callback);

    }


    private ApiResponse<ProfileFieldsGetAllFieldSectionsResponse> getAllFieldSectionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllFieldSectionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ProfileFieldsGetAllFieldSectionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllFieldSectionsAsync(final ApiCallback<ProfileFieldsGetAllFieldSectionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllFieldSectionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ProfileFieldsGetAllFieldSectionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllFieldSectionsRequestBuilder {

        private GetAllFieldSectionsRequestBuilder() {
        }

        /**
         * Build call for getAllFieldSections
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllFieldSectionsCall(_callback);
        }


        /**
         * Execute getAllFieldSections request
         * @return ProfileFieldsGetAllFieldSectionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ProfileFieldsGetAllFieldSectionsResponse execute() throws ApiException {
            ApiResponse<ProfileFieldsGetAllFieldSectionsResponse> localVarResp = getAllFieldSectionsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllFieldSections request with HTTP info returned
         * @return ApiResponse&lt;ProfileFieldsGetAllFieldSectionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProfileFieldsGetAllFieldSectionsResponse> executeWithHttpInfo() throws ApiException {
            return getAllFieldSectionsWithHttpInfo();
        }

        /**
         * Execute getAllFieldSections request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProfileFieldsGetAllFieldSectionsResponse> _callback) throws ApiException {
            return getAllFieldSectionsAsync(_callback);
        }
    }

    /**
     * Get all Profile Field Sections
     * Returns all profiles field sections as configured at your company. Linked to this endpoint is a list of profile fields, including additional fields not necessarily included in the #endpoint:2PMjgBj4iCTtp4tJe endpoint, as not all are API transferrable.
     * @return GetAllFieldSectionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetAllFieldSectionsRequestBuilder getAllFieldSections() throws IllegalArgumentException {
        return new GetAllFieldSectionsRequestBuilder();
    }
    private okhttp3.Call getFieldSectionCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profiles/fields/sections/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldSectionValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFieldSection(Async)");
        }

        return getFieldSectionCall(id, _callback);

    }


    private ApiResponse<ProfileFieldsGetFieldSectionResponse> getFieldSectionWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getFieldSectionValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ProfileFieldsGetFieldSectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFieldSectionAsync(String id, final ApiCallback<ProfileFieldsGetFieldSectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldSectionValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ProfileFieldsGetFieldSectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFieldSectionRequestBuilder {
        private final String id;

        private GetFieldSectionRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getFieldSection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFieldSectionCall(id, _callback);
        }


        /**
         * Execute getFieldSection request
         * @return ProfileFieldsGetFieldSectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ProfileFieldsGetFieldSectionResponse execute() throws ApiException {
            ApiResponse<ProfileFieldsGetFieldSectionResponse> localVarResp = getFieldSectionWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFieldSection request with HTTP info returned
         * @return ApiResponse&lt;ProfileFieldsGetFieldSectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProfileFieldsGetFieldSectionResponse> executeWithHttpInfo() throws ApiException {
            return getFieldSectionWithHttpInfo(id);
        }

        /**
         * Execute getFieldSection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProfileFieldsGetFieldSectionResponse> _callback) throws ApiException {
            return getFieldSectionAsync(id, _callback);
        }
    }

    /**
     * Get a Profile Field Section
     * Returns information about a single Profile Field Section.
     * @param id id of the profile field section you want to view (required)
     * @return GetFieldSectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetFieldSectionRequestBuilder getFieldSection(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetFieldSectionRequestBuilder(id);
    }
    private okhttp3.Call updateFieldInSectionCall(String id, UpdateSection updateSection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSection;

        // create path and map variables
        String localVarPath = "/profiles/fields/sections/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFieldInSectionValidateBeforeCall(String id, UpdateSection updateSection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateFieldInSection(Async)");
        }

        return updateFieldInSectionCall(id, updateSection, _callback);

    }


    private ApiResponse<ProfileFieldsUpdateFieldInSection200Response> updateFieldInSectionWithHttpInfo(String id, UpdateSection updateSection) throws ApiException {
        okhttp3.Call localVarCall = updateFieldInSectionValidateBeforeCall(id, updateSection, null);
        Type localVarReturnType = new TypeToken<ProfileFieldsUpdateFieldInSection200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFieldInSectionAsync(String id, UpdateSection updateSection, final ApiCallback<ProfileFieldsUpdateFieldInSection200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFieldInSectionValidateBeforeCall(id, updateSection, _callback);
        Type localVarReturnType = new TypeToken<ProfileFieldsUpdateFieldInSection200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFieldInSectionRequestBuilder {
        private final List<UpdateSectionPayload> sections;
        private final String id;

        private UpdateFieldInSectionRequestBuilder(List<UpdateSectionPayload> sections, String id) {
            this.sections = sections;
            this.id = id;
        }

        /**
         * Build call for updateFieldInSection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateSection updateSection = buildBodyParams();
            return updateFieldInSectionCall(id, updateSection, _callback);
        }

        private UpdateSection buildBodyParams() {
            UpdateSection updateSection = new UpdateSection();
            updateSection.sections(this.sections);
            return updateSection;
        }

        /**
         * Execute updateFieldInSection request
         * @return ProfileFieldsUpdateFieldInSection200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ProfileFieldsUpdateFieldInSection200Response execute() throws ApiException {
            UpdateSection updateSection = buildBodyParams();
            ApiResponse<ProfileFieldsUpdateFieldInSection200Response> localVarResp = updateFieldInSectionWithHttpInfo(id, updateSection);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFieldInSection request with HTTP info returned
         * @return ApiResponse&lt;ProfileFieldsUpdateFieldInSection200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProfileFieldsUpdateFieldInSection200Response> executeWithHttpInfo() throws ApiException {
            UpdateSection updateSection = buildBodyParams();
            return updateFieldInSectionWithHttpInfo(id, updateSection);
        }

        /**
         * Execute updateFieldInSection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProfileFieldsUpdateFieldInSection200Response> _callback) throws ApiException {
            UpdateSection updateSection = buildBodyParams();
            return updateFieldInSectionAsync(id, updateSection, _callback);
        }
    }

    /**
     * Update a Profile Field Section
     * Updates the name/label of a profile field section.
     * @param id id of the profile field section you want to view (required)
     * @return UpdateFieldInSectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFieldInSectionRequestBuilder updateFieldInSection(List<UpdateSectionPayload> sections, String id) throws IllegalArgumentException {
        if (sections == null) throw new IllegalArgumentException("\"sections\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateFieldInSectionRequestBuilder(sections, id);
    }
}
