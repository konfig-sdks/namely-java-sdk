/*
 * Namely API
 * Move your app forward with the Namely API Move your app forward with the Namely API
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * GroupType
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class GroupType {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_FIELD_NAME = "field_name";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private String fieldName;

  public static final String SERIALIZED_NAME_DELETABLE = "deletable";
  @SerializedName(SERIALIZED_NAME_DELETABLE)
  private Boolean deletable;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_X_GROUPS_AS_TEAMS = "x_groups_as_teams";
  @SerializedName(SERIALIZED_NAME_X_GROUPS_AS_TEAMS)
  private Boolean xGroupsAsTeams;

  public GroupType() {
  }

  public GroupType title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * name/label of the group type
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "name/label of the group type")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public GroupType id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * unique identifier of the group type
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "unique identifier of the group type")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public GroupType fieldName(String fieldName) {
    
    
    
    
    this.fieldName = fieldName;
    return this;
  }

   /**
   * immutable, system generated field name for the group type
   * @return fieldName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "immutable, system generated field name for the group type")

  public String getFieldName() {
    return fieldName;
  }


  public void setFieldName(String fieldName) {
    
    
    
    this.fieldName = fieldName;
  }


  public GroupType deletable(Boolean deletable) {
    
    
    
    
    this.deletable = deletable;
    return this;
  }

   /**
   * denotes whether or not the group can be deleted by someone with the appropriate permissions; &lt;code&gt;true&lt;/code&gt; for all groups except Departments and Office Location.
   * @return deletable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "denotes whether or not the group can be deleted by someone with the appropriate permissions; <code>true</code> for all groups except Departments and Office Location.")

  public Boolean getDeletable() {
    return deletable;
  }


  public void setDeletable(Boolean deletable) {
    
    
    
    this.deletable = deletable;
  }


  public GroupType type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * returns one of three group types: office location, department, or custom; location and department are system delivered groups (will also not be deletable)
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "returns one of three group types: office location, department, or custom; location and department are system delivered groups (will also not be deletable)")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public GroupType xGroupsAsTeams(Boolean xGroupsAsTeams) {
    
    
    
    
    this.xGroupsAsTeams = xGroupsAsTeams;
    return this;
  }

   /**
   * &lt;code&gt;true&lt;/code&gt; if the group type has been chosen to display on the \&quot;Teams\&quot; page in Namely, eligible for @mention (additional permissions apply)
   * @return xGroupsAsTeams
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<code>true</code> if the group type has been chosen to display on the \"Teams\" page in Namely, eligible for @mention (additional permissions apply)")

  public Boolean getxGroupsAsTeams() {
    return xGroupsAsTeams;
  }


  public void setxGroupsAsTeams(Boolean xGroupsAsTeams) {
    
    
    
    this.xGroupsAsTeams = xGroupsAsTeams;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GroupType instance itself
   */
  public GroupType putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupType groupType = (GroupType) o;
    return Objects.equals(this.title, groupType.title) &&
        Objects.equals(this.id, groupType.id) &&
        Objects.equals(this.fieldName, groupType.fieldName) &&
        Objects.equals(this.deletable, groupType.deletable) &&
        Objects.equals(this.type, groupType.type) &&
        Objects.equals(this.xGroupsAsTeams, groupType.xGroupsAsTeams)&&
        Objects.equals(this.additionalProperties, groupType.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, id, fieldName, deletable, type, xGroupsAsTeams, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupType {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    deletable: ").append(toIndentedString(deletable)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    xGroupsAsTeams: ").append(toIndentedString(xGroupsAsTeams)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("id");
    openapiFields.add("field_name");
    openapiFields.add("deletable");
    openapiFields.add("type");
    openapiFields.add("x_groups_as_teams");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GroupType
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GroupType.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupType is not found in the empty JSON string", GroupType.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("field_name") != null && !jsonObj.get("field_name").isJsonNull()) && !jsonObj.get("field_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field_name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupType.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupType>() {
           @Override
           public void write(JsonWriter out, GroupType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupType read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GroupType instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GroupType given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GroupType
  * @throws IOException if the JSON string is invalid with respect to GroupType
  */
  public static GroupType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupType.class);
  }

 /**
  * Convert an instance of GroupType to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

