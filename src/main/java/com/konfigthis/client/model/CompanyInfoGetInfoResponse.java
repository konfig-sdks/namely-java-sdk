/*
 * Namely API
 * Move your app forward with the Namely API Move your app forward with the Namely API
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CompanyInfoGetInfoResponseAuthenticationsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CompanyInfoGetInfoResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CompanyInfoGetInfoResponse {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERMALINK = "permalink";
  @SerializedName(SERIALIZED_NAME_PERMALINK)
  private String permalink;

  public static final String SERIALIZED_NAME_BACKGROUND_URL = "background_url";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_URL)
  private String backgroundUrl;

  public static final String SERIALIZED_NAME_LOGO_URL = "logo_url";
  @SerializedName(SERIALIZED_NAME_LOGO_URL)
  private String logoUrl;

  public static final String SERIALIZED_NAME_AUTHENTICATIONS = "authentications";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATIONS)
  private List<CompanyInfoGetInfoResponseAuthenticationsInner> authentications = null;

  public CompanyInfoGetInfoResponse() {
  }

  public CompanyInfoGetInfoResponse name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Compay name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Compay name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public CompanyInfoGetInfoResponse permalink(String permalink) {
    
    
    
    
    this.permalink = permalink;
    return this;
  }

   /**
   * Company permalink, the subdomain before namely.com
   * @return permalink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Company permalink, the subdomain before namely.com")

  public String getPermalink() {
    return permalink;
  }


  public void setPermalink(String permalink) {
    
    
    
    this.permalink = permalink;
  }


  public CompanyInfoGetInfoResponse backgroundUrl(String backgroundUrl) {
    
    
    
    
    this.backgroundUrl = backgroundUrl;
    return this;
  }

   /**
   * Background image on the login page.
   * @return backgroundUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Background image on the login page.")

  public String getBackgroundUrl() {
    return backgroundUrl;
  }


  public void setBackgroundUrl(String backgroundUrl) {
    
    
    
    this.backgroundUrl = backgroundUrl;
  }


  public CompanyInfoGetInfoResponse logoUrl(String logoUrl) {
    
    
    
    
    this.logoUrl = logoUrl;
    return this;
  }

   /**
   * Logo image on the home page.
   * @return logoUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Logo image on the home page.")

  public String getLogoUrl() {
    return logoUrl;
  }


  public void setLogoUrl(String logoUrl) {
    
    
    
    this.logoUrl = logoUrl;
  }


  public CompanyInfoGetInfoResponse authentications(List<CompanyInfoGetInfoResponseAuthenticationsInner> authentications) {
    
    
    
    
    this.authentications = authentications;
    return this;
  }

  public CompanyInfoGetInfoResponse addAuthenticationsItem(CompanyInfoGetInfoResponseAuthenticationsInner authenticationsItem) {
    if (this.authentications == null) {
      this.authentications = new ArrayList<>();
    }
    this.authentications.add(authenticationsItem);
    return this;
  }

   /**
   * Get authentications
   * @return authentications
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CompanyInfoGetInfoResponseAuthenticationsInner> getAuthentications() {
    return authentications;
  }


  public void setAuthentications(List<CompanyInfoGetInfoResponseAuthenticationsInner> authentications) {
    
    
    
    this.authentications = authentications;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CompanyInfoGetInfoResponse instance itself
   */
  public CompanyInfoGetInfoResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyInfoGetInfoResponse companyInfoGetInfoResponse = (CompanyInfoGetInfoResponse) o;
    return Objects.equals(this.name, companyInfoGetInfoResponse.name) &&
        Objects.equals(this.permalink, companyInfoGetInfoResponse.permalink) &&
        Objects.equals(this.backgroundUrl, companyInfoGetInfoResponse.backgroundUrl) &&
        Objects.equals(this.logoUrl, companyInfoGetInfoResponse.logoUrl) &&
        Objects.equals(this.authentications, companyInfoGetInfoResponse.authentications)&&
        Objects.equals(this.additionalProperties, companyInfoGetInfoResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, permalink, backgroundUrl, logoUrl, authentications, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyInfoGetInfoResponse {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    permalink: ").append(toIndentedString(permalink)).append("\n");
    sb.append("    backgroundUrl: ").append(toIndentedString(backgroundUrl)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    authentications: ").append(toIndentedString(authentications)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("permalink");
    openapiFields.add("background_url");
    openapiFields.add("logo_url");
    openapiFields.add("authentications");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CompanyInfoGetInfoResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CompanyInfoGetInfoResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyInfoGetInfoResponse is not found in the empty JSON string", CompanyInfoGetInfoResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("permalink") != null && !jsonObj.get("permalink").isJsonNull()) && !jsonObj.get("permalink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permalink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permalink").toString()));
      }
      if ((jsonObj.get("background_url") != null && !jsonObj.get("background_url").isJsonNull()) && !jsonObj.get("background_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `background_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("background_url").toString()));
      }
      if ((jsonObj.get("logo_url") != null && !jsonObj.get("logo_url").isJsonNull()) && !jsonObj.get("logo_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo_url").toString()));
      }
      if (jsonObj.get("authentications") != null && !jsonObj.get("authentications").isJsonNull()) {
        JsonArray jsonArrayauthentications = jsonObj.getAsJsonArray("authentications");
        if (jsonArrayauthentications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authentications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authentications` to be an array in the JSON string but got `%s`", jsonObj.get("authentications").toString()));
          }

          // validate the optional field `authentications` (array)
          for (int i = 0; i < jsonArrayauthentications.size(); i++) {
            CompanyInfoGetInfoResponseAuthenticationsInner.validateJsonObject(jsonArrayauthentications.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyInfoGetInfoResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyInfoGetInfoResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyInfoGetInfoResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyInfoGetInfoResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyInfoGetInfoResponse>() {
           @Override
           public void write(JsonWriter out, CompanyInfoGetInfoResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyInfoGetInfoResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CompanyInfoGetInfoResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompanyInfoGetInfoResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompanyInfoGetInfoResponse
  * @throws IOException if the JSON string is invalid with respect to CompanyInfoGetInfoResponse
  */
  public static CompanyInfoGetInfoResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyInfoGetInfoResponse.class);
  }

 /**
  * Convert an instance of CompanyInfoGetInfoResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

