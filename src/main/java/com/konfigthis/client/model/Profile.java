/*
 * Namely API
 * Move your app forward with the Namely API Move your app forward with the Namely API
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Dental;
import com.konfigthis.client.model.Healthcare;
import com.konfigthis.client.model.Home;
import com.konfigthis.client.model.Image;
import com.konfigthis.client.model.JobTitleLink;
import com.konfigthis.client.model.Office;
import com.konfigthis.client.model.ProfileEmployeeType;
import com.konfigthis.client.model.ProfileLinks;
import com.konfigthis.client.model.ProfileReportsToInner;
import com.konfigthis.client.model.Salary;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Profile
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Profile {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_USER_STATUS = "user_status";
  @SerializedName(SERIALIZED_NAME_USER_STATUS)
  private String userStatus;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private Integer updatedAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Integer createdAt;

  public static final String SERIALIZED_NAME_PREFERRED_NAME = "preferred_name";
  @SerializedName(SERIALIZED_NAME_PREFERRED_NAME)
  private String preferredName;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private Image image;

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_JOB_TITLE = "job_title";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private JobTitleLink jobTitle;

  public static final String SERIALIZED_NAME_REPORTS_TO = "reports_to";
  @SerializedName(SERIALIZED_NAME_REPORTS_TO)
  private List<ProfileReportsToInner> reportsTo = null;

  public static final String SERIALIZED_NAME_EMPLOYEE_TYPE = "employee_type";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_TYPE)
  private ProfileEmployeeType employeeType;

  public static final String SERIALIZED_NAME_ACCESS_ROLE = "access_role";
  @SerializedName(SERIALIZED_NAME_ACCESS_ROLE)
  private String accessRole;

  public static final String SERIALIZED_NAME_ETHNICITY = "ethnicity";
  @SerializedName(SERIALIZED_NAME_ETHNICITY)
  private String ethnicity;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private ProfileLinks links;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middle_name";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_JOB_CHANGE_REASON = "job_change_reason";
  @SerializedName(SERIALIZED_NAME_JOB_CHANGE_REASON)
  private String jobChangeReason;

  public static final String SERIALIZED_NAME_TERMINATED_REASON = "terminated_reason";
  @SerializedName(SERIALIZED_NAME_TERMINATED_REASON)
  private String terminatedReason;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_DEPARTURE_DATE = "departure_date";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_DATE)
  private String departureDate;

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employee_id";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_PERSONAL_EMAIL = "personal_email";
  @SerializedName(SERIALIZED_NAME_PERSONAL_EMAIL)
  private String personalEmail;

  public static final String SERIALIZED_NAME_DOB = "dob";
  @SerializedName(SERIALIZED_NAME_DOB)
  private String dob;

  public static final String SERIALIZED_NAME_SSN = "ssn";
  @SerializedName(SERIALIZED_NAME_SSN)
  private String ssn;

  public static final String SERIALIZED_NAME_MARITAL_STATUS = "marital_status";
  @SerializedName(SERIALIZED_NAME_MARITAL_STATUS)
  private String maritalStatus;

  public static final String SERIALIZED_NAME_BIO = "bio";
  @SerializedName(SERIALIZED_NAME_BIO)
  private String bio;

  public static final String SERIALIZED_NAME_ASSET_MANAGEMENT = "asset_management";
  @SerializedName(SERIALIZED_NAME_ASSET_MANAGEMENT)
  private String assetManagement;

  public static final String SERIALIZED_NAME_LAPTOP_ASSET_NUMBER = "laptop_asset_number";
  @SerializedName(SERIALIZED_NAME_LAPTOP_ASSET_NUMBER)
  private String laptopAssetNumber;

  public static final String SERIALIZED_NAME_CORPORATE_CARD_MEMBER = "corporate_card_member";
  @SerializedName(SERIALIZED_NAME_CORPORATE_CARD_MEMBER)
  private String corporateCardMember;

  public static final String SERIALIZED_NAME_KEY_TAG_NUMBER = "key_tag_number";
  @SerializedName(SERIALIZED_NAME_KEY_TAG_NUMBER)
  private String keyTagNumber;

  public static final String SERIALIZED_NAME_LINKEDIN_URL = "linkedin_url";
  @SerializedName(SERIALIZED_NAME_LINKEDIN_URL)
  private String linkedinUrl;

  public static final String SERIALIZED_NAME_OFFICE_MAIN_NUMBER = "office_main_number";
  @SerializedName(SERIALIZED_NAME_OFFICE_MAIN_NUMBER)
  private String officeMainNumber;

  public static final String SERIALIZED_NAME_OFFICE_DIRECT_DIAL = "office_direct_dial";
  @SerializedName(SERIALIZED_NAME_OFFICE_DIRECT_DIAL)
  private String officeDirectDial;

  public static final String SERIALIZED_NAME_OFFICE_PHONE = "office_phone";
  @SerializedName(SERIALIZED_NAME_OFFICE_PHONE)
  private String officePhone;

  public static final String SERIALIZED_NAME_OFFICE_FAX = "office_fax";
  @SerializedName(SERIALIZED_NAME_OFFICE_FAX)
  private String officeFax;

  public static final String SERIALIZED_NAME_OFFICE_COMPANY_MOBILE = "office_company_mobile";
  @SerializedName(SERIALIZED_NAME_OFFICE_COMPANY_MOBILE)
  private String officeCompanyMobile;

  public static final String SERIALIZED_NAME_HOME_PHONE = "home_phone";
  @SerializedName(SERIALIZED_NAME_HOME_PHONE)
  private String homePhone;

  public static final String SERIALIZED_NAME_MOBILE_PHONE = "mobile_phone";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE)
  private String mobilePhone;

  public static final String SERIALIZED_NAME_HOME = "home";
  @SerializedName(SERIALIZED_NAME_HOME)
  private Home home;

  public static final String SERIALIZED_NAME_OFFICE = "office";
  @SerializedName(SERIALIZED_NAME_OFFICE)
  private Office office;

  public static final String SERIALIZED_NAME_EMERGENCY_CONTACT = "emergency_contact";
  @SerializedName(SERIALIZED_NAME_EMERGENCY_CONTACT)
  private String emergencyContact;

  public static final String SERIALIZED_NAME_EMERGENCY_CONTACT_PHONE = "emergency_contact_phone";
  @SerializedName(SERIALIZED_NAME_EMERGENCY_CONTACT_PHONE)
  private String emergencyContactPhone;

  public static final String SERIALIZED_NAME_RESUME = "resume";
  @SerializedName(SERIALIZED_NAME_RESUME)
  private String resume;

  public static final String SERIALIZED_NAME_CURRENT_JOB_DESCRIPTION = "current_job_description";
  @SerializedName(SERIALIZED_NAME_CURRENT_JOB_DESCRIPTION)
  private String currentJobDescription;

  public static final String SERIALIZED_NAME_JOB_DESCRIPTION = "job_description";
  @SerializedName(SERIALIZED_NAME_JOB_DESCRIPTION)
  private String jobDescription;

  public static final String SERIALIZED_NAME_SALARY = "salary";
  @SerializedName(SERIALIZED_NAME_SALARY)
  private Salary salary;

  public static final String SERIALIZED_NAME_HEALTHCARE = "healthcare";
  @SerializedName(SERIALIZED_NAME_HEALTHCARE)
  private Healthcare healthcare;

  public static final String SERIALIZED_NAME_HEALTHCARE_INFO = "healthcare_info";
  @SerializedName(SERIALIZED_NAME_HEALTHCARE_INFO)
  private String healthcareInfo;

  public static final String SERIALIZED_NAME_DENTAL = "dental";
  @SerializedName(SERIALIZED_NAME_DENTAL)
  private Dental dental;

  public static final String SERIALIZED_NAME_DENTAL_INFO = "dental_info";
  @SerializedName(SERIALIZED_NAME_DENTAL_INFO)
  private String dentalInfo;

  public static final String SERIALIZED_NAME_VISION_PLAN_INFO = "vision_plan_info";
  @SerializedName(SERIALIZED_NAME_VISION_PLAN_INFO)
  private String visionPlanInfo;

  public static final String SERIALIZED_NAME_LIFE_INSURANCE_INFO = "life_insurance_info";
  @SerializedName(SERIALIZED_NAME_LIFE_INSURANCE_INFO)
  private String lifeInsuranceInfo;

  public static final String SERIALIZED_NAME_NAMELY_TIME_EMPLOYEE_ROLE = "namely_time_employee_role";
  @SerializedName(SERIALIZED_NAME_NAMELY_TIME_EMPLOYEE_ROLE)
  private String namelyTimeEmployeeRole;

  public static final String SERIALIZED_NAME_NAMELY_TIME_MANAGER_ROLE = "namely_time_manager_role";
  @SerializedName(SERIALIZED_NAME_NAMELY_TIME_MANAGER_ROLE)
  private String namelyTimeManagerRole;

  public Profile() {
  }

  public Profile id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * unique identifier of the profile
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "unique identifier of the profile")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Profile email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * company email of the profile
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "company email of the profile")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public Profile firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * first name of the profile
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "first name of the profile")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public Profile lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * last name of the profile
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "last name of the profile")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public Profile userStatus(String userStatus) {
    
    
    
    
    this.userStatus = userStatus;
    return this;
  }

   /**
   * user status of the profile; valid values in the API are &lt;code&gt;active&lt;/code&gt;, &lt;code&gt;pending&lt;/code&gt;, and &lt;code&gt;inactive&lt;/code&gt;
   * @return userStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "user status of the profile; valid values in the API are <code>active</code>, <code>pending</code>, and <code>inactive</code>")

  public String getUserStatus() {
    return userStatus;
  }


  public void setUserStatus(String userStatus) {
    
    
    
    this.userStatus = userStatus;
  }


  public Profile updatedAt(Integer updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * epoch time that the profile was updated; equal to &lt;code&gt;create_at&lt;/code&gt; if never updated
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "epoch time that the profile was updated; equal to <code>create_at</code> if never updated")

  public Integer getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(Integer updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }


  public Profile createdAt(Integer createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * epoch time that the profile was created
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "epoch time that the profile was created")

  public Integer getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(Integer createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public Profile preferredName(String preferredName) {
    
    
    
    
    this.preferredName = preferredName;
    return this;
  }

   /**
   * preferred name of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return preferredName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "preferred name of the profile; <code>null</code> if never provided; blank if provided then deleted")

  public String getPreferredName() {
    return preferredName;
  }


  public void setPreferredName(String preferredName) {
    
    
    
    this.preferredName = preferredName;
  }


  public Profile image(Image image) {
    
    
    
    
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Image getImage() {
    return image;
  }


  public void setImage(Image image) {
    
    
    
    this.image = image;
  }


  public Profile fullName(String fullName) {
    
    
    
    
    this.fullName = fullName;
    return this;
  }

   /**
   * combination of &lt;code&gt;first_name&lt;/code&gt; and &lt;code&gt;last_name&lt;/code&gt;
   * @return fullName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "combination of <code>first_name</code> and <code>last_name</code>")

  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    
    
    
    this.fullName = fullName;
  }


  public Profile jobTitle(JobTitleLink jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * Get jobTitle
   * @return jobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobTitleLink getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(JobTitleLink jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public Profile reportsTo(List<ProfileReportsToInner> reportsTo) {
    
    
    
    
    this.reportsTo = reportsTo;
    return this;
  }

  public Profile addReportsToItem(ProfileReportsToInner reportsToItem) {
    if (this.reportsTo == null) {
      this.reportsTo = new ArrayList<>();
    }
    this.reportsTo.add(reportsToItem);
    return this;
  }

   /**
   * information regarding the profile to whom the profile of this object reports
   * @return reportsTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "information regarding the profile to whom the profile of this object reports")

  public List<ProfileReportsToInner> getReportsTo() {
    return reportsTo;
  }


  public void setReportsTo(List<ProfileReportsToInner> reportsTo) {
    
    
    
    this.reportsTo = reportsTo;
  }


  public Profile employeeType(ProfileEmployeeType employeeType) {
    
    
    
    
    this.employeeType = employeeType;
    return this;
  }

   /**
   * Get employeeType
   * @return employeeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProfileEmployeeType getEmployeeType() {
    return employeeType;
  }


  public void setEmployeeType(ProfileEmployeeType employeeType) {
    
    
    
    this.employeeType = employeeType;
  }


  public Profile accessRole(String accessRole) {
    
    
    
    
    this.accessRole = accessRole;
    return this;
  }

   /**
   * returns the type of access_role assigned to the profile
   * @return accessRole
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "returns the type of access_role assigned to the profile")

  public String getAccessRole() {
    return accessRole;
  }


  public void setAccessRole(String accessRole) {
    
    
    
    this.accessRole = accessRole;
  }


  public Profile ethnicity(String ethnicity) {
    
    
    
    
    this.ethnicity = ethnicity;
    return this;
  }

   /**
   * self described ethnicity of the profile; &lt;code&gt;null&lt;/code&gt; if never provided
   * @return ethnicity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "self described ethnicity of the profile; <code>null</code> if never provided")

  public String getEthnicity() {
    return ethnicity;
  }


  public void setEthnicity(String ethnicity) {
    
    
    
    this.ethnicity = ethnicity;
  }


  public Profile links(ProfileLinks links) {
    
    
    
    
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProfileLinks getLinks() {
    return links;
  }


  public void setLinks(ProfileLinks links) {
    
    
    
    this.links = links;
  }


  public Profile middleName(String middleName) {
    
    
    
    
    this.middleName = middleName;
    return this;
  }

   /**
   * middle name of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return middleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "middle name of the profile; <code>null</code> if never provided; blank if provided then deleted")

  public String getMiddleName() {
    return middleName;
  }


  public void setMiddleName(String middleName) {
    
    
    
    this.middleName = middleName;
  }


  public Profile gender(String gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * gender of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; valid values include &lt;code&gt;Male&lt;/code&gt; and &lt;code&gt;Female&lt;/code&gt;
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "gender of the profile; <code>null</code> if never provided; valid values include <code>Male</code> and <code>Female</code>")

  public String getGender() {
    return gender;
  }


  public void setGender(String gender) {
    
    
    
    this.gender = gender;
  }


  public Profile jobChangeReason(String jobChangeReason) {
    
    
    
    
    this.jobChangeReason = jobChangeReason;
    return this;
  }

   /**
   * job change reason of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; valid values include &lt;code&gt;New Hire&lt;/code&gt;, &lt;code&gt;Salary Change&lt;/code&gt;, &lt;code&gt;Promotion&lt;/code&gt;, and &lt;code&gt;Transfer&lt;/code&gt;
   * @return jobChangeReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "job change reason of the profile; <code>null</code> if never provided; valid values include <code>New Hire</code>, <code>Salary Change</code>, <code>Promotion</code>, and <code>Transfer</code>")

  public String getJobChangeReason() {
    return jobChangeReason;
  }


  public void setJobChangeReason(String jobChangeReason) {
    
    
    
    this.jobChangeReason = jobChangeReason;
  }


  public Profile terminatedReason(String terminatedReason) {
    
    
    
    
    this.terminatedReason = terminatedReason;
    return this;
  }

   /**
   * terminated reason of the profile; &lt;code&gt;null&lt;/code&gt; if never provided
   * @return terminatedReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "terminated reason of the profile; <code>null</code> if never provided")

  public String getTerminatedReason() {
    return terminatedReason;
  }


  public void setTerminatedReason(String terminatedReason) {
    
    
    
    this.terminatedReason = terminatedReason;
  }


  public Profile startDate(String startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * start date of the profile; format &lt;code&gt;YYYY-MM-DD&lt;/code&gt;
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "start date of the profile; format <code>YYYY-MM-DD</code>")

  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    
    
    
    this.startDate = startDate;
  }


  public Profile departureDate(String departureDate) {
    
    
    
    
    this.departureDate = departureDate;
    return this;
  }

   /**
   * departure date of the profile; format &lt;code&gt;YYYY-MM-DD&lt;/code&gt;; blank if never provided or provided then deleted
   * @return departureDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "departure date of the profile; format <code>YYYY-MM-DD</code>; blank if never provided or provided then deleted")

  public String getDepartureDate() {
    return departureDate;
  }


  public void setDepartureDate(String departureDate) {
    
    
    
    this.departureDate = departureDate;
  }


  public Profile employeeId(String employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * employee id of the profile; blank if never provided or provided then deleted
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "employee id of the profile; blank if never provided or provided then deleted")

  public String getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(String employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public Profile personalEmail(String personalEmail) {
    
    
    
    
    this.personalEmail = personalEmail;
    return this;
  }

   /**
   * employee id of the profile; blank if never provided or provided then deleted
   * @return personalEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "employee id of the profile; blank if never provided or provided then deleted")

  public String getPersonalEmail() {
    return personalEmail;
  }


  public void setPersonalEmail(String personalEmail) {
    
    
    
    this.personalEmail = personalEmail;
  }


  public Profile dob(String dob) {
    
    
    
    
    this.dob = dob;
    return this;
  }

   /**
   * date of birth of the profile; format &lt;code&gt;YYYY-MM-DD&lt;/code&gt;; blank if never provided or provided then deleted
   * @return dob
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "date of birth of the profile; format <code>YYYY-MM-DD</code>; blank if never provided or provided then deleted")

  public String getDob() {
    return dob;
  }


  public void setDob(String dob) {
    
    
    
    this.dob = dob;
  }


  public Profile ssn(String ssn) {
    
    
    
    
    this.ssn = ssn;
    return this;
  }

   /**
   * ssn of the profile; blank if never provided or provided then deleted
   * @return ssn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ssn of the profile; blank if never provided or provided then deleted")

  public String getSsn() {
    return ssn;
  }


  public void setSsn(String ssn) {
    
    
    
    this.ssn = ssn;
  }


  public Profile maritalStatus(String maritalStatus) {
    
    
    
    
    this.maritalStatus = maritalStatus;
    return this;
  }

   /**
   * marital status of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; valid values include &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Married&lt;/code&gt;, &lt;code&gt;Civil Partnership&lt;/code&gt;, &lt;code&gt;Separated&lt;/code&gt;, and &lt;code&gt;Divorced&lt;/code&gt;
   * @return maritalStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "marital status of the profile; <code>null</code> if never provided; valid values include <code>Single</code>, <code>Married</code>, <code>Civil Partnership</code>, <code>Separated</code>, and <code>Divorced</code>")

  public String getMaritalStatus() {
    return maritalStatus;
  }


  public void setMaritalStatus(String maritalStatus) {
    
    
    
    this.maritalStatus = maritalStatus;
  }


  public Profile bio(String bio) {
    
    
    
    
    this.bio = bio;
    return this;
  }

   /**
   * bio of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return bio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "bio of the profile; <code>null</code> if never provided; blank if provided then deleted")

  public String getBio() {
    return bio;
  }


  public void setBio(String bio) {
    
    
    
    this.bio = bio;
  }


  public Profile assetManagement(String assetManagement) {
    
    
    
    
    this.assetManagement = assetManagement;
    return this;
  }

   /**
   * list of assets on the profile; blank if never provided or provided then deleted; valid values include &lt;code&gt;Laptop&lt;/code&gt;, &lt;code&gt;Cell Phone&lt;/code&gt;, &lt;code&gt;Building Keys&lt;/code&gt;, &lt;code&gt;Corporate Card&lt;/code&gt;, and &lt;code&gt;Air Card&lt;/code&gt;
   * @return assetManagement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "list of assets on the profile; blank if never provided or provided then deleted; valid values include <code>Laptop</code>, <code>Cell Phone</code>, <code>Building Keys</code>, <code>Corporate Card</code>, and <code>Air Card</code>")

  public String getAssetManagement() {
    return assetManagement;
  }


  public void setAssetManagement(String assetManagement) {
    
    
    
    this.assetManagement = assetManagement;
  }


  public Profile laptopAssetNumber(String laptopAssetNumber) {
    
    
    
    
    this.laptopAssetNumber = laptopAssetNumber;
    return this;
  }

   /**
   * laptop asset number of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return laptopAssetNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "laptop asset number of the profile; <code>null</code> if never provided; blank if provided then deleted")

  public String getLaptopAssetNumber() {
    return laptopAssetNumber;
  }


  public void setLaptopAssetNumber(String laptopAssetNumber) {
    
    
    
    this.laptopAssetNumber = laptopAssetNumber;
  }


  public Profile corporateCardMember(String corporateCardMember) {
    
    
    
    
    this.corporateCardMember = corporateCardMember;
    return this;
  }

   /**
   * corporate card number of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return corporateCardMember
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "corporate card number of the profile; <code>null</code> if never provided; blank if provided then deleted")

  public String getCorporateCardMember() {
    return corporateCardMember;
  }


  public void setCorporateCardMember(String corporateCardMember) {
    
    
    
    this.corporateCardMember = corporateCardMember;
  }


  public Profile keyTagNumber(String keyTagNumber) {
    
    
    
    
    this.keyTagNumber = keyTagNumber;
    return this;
  }

   /**
   * key tag number of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return keyTagNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "key tag number of the profile; <code>null</code> if never provided; blank if provided then deleted")

  public String getKeyTagNumber() {
    return keyTagNumber;
  }


  public void setKeyTagNumber(String keyTagNumber) {
    
    
    
    this.keyTagNumber = keyTagNumber;
  }


  public Profile linkedinUrl(String linkedinUrl) {
    
    
    
    
    this.linkedinUrl = linkedinUrl;
    return this;
  }

   /**
   * linkedin_url of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return linkedinUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "linkedin_url of the profile; <code>null</code> if never provided; blank if provided then deleted")

  public String getLinkedinUrl() {
    return linkedinUrl;
  }


  public void setLinkedinUrl(String linkedinUrl) {
    
    
    
    this.linkedinUrl = linkedinUrl;
  }


  public Profile officeMainNumber(String officeMainNumber) {
    
    
    
    
    this.officeMainNumber = officeMainNumber;
    return this;
  }

   /**
   * office main number of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return officeMainNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "office main number of the profile; <code>null</code> if never provided; blank if provided then deleted")

  public String getOfficeMainNumber() {
    return officeMainNumber;
  }


  public void setOfficeMainNumber(String officeMainNumber) {
    
    
    
    this.officeMainNumber = officeMainNumber;
  }


  public Profile officeDirectDial(String officeDirectDial) {
    
    
    
    
    this.officeDirectDial = officeDirectDial;
    return this;
  }

   /**
   * office direct dial number of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return officeDirectDial
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "office direct dial number of the profile; <code>null</code> if never provided; blank if provided then deleted")

  public String getOfficeDirectDial() {
    return officeDirectDial;
  }


  public void setOfficeDirectDial(String officeDirectDial) {
    
    
    
    this.officeDirectDial = officeDirectDial;
  }


  public Profile officePhone(String officePhone) {
    
    
    
    
    this.officePhone = officePhone;
    return this;
  }

   /**
   * office phone number of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return officePhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "office phone number of the profile; <code>null</code> if never provided; blank if provided then deleted")

  public String getOfficePhone() {
    return officePhone;
  }


  public void setOfficePhone(String officePhone) {
    
    
    
    this.officePhone = officePhone;
  }


  public Profile officeFax(String officeFax) {
    
    
    
    
    this.officeFax = officeFax;
    return this;
  }

   /**
   * office fax number of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return officeFax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "office fax number of the profile; <code>null</code> if never provided; blank if provided then deleted")

  public String getOfficeFax() {
    return officeFax;
  }


  public void setOfficeFax(String officeFax) {
    
    
    
    this.officeFax = officeFax;
  }


  public Profile officeCompanyMobile(String officeCompanyMobile) {
    
    
    
    
    this.officeCompanyMobile = officeCompanyMobile;
    return this;
  }

   /**
   * office company mobile phone number of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return officeCompanyMobile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "office company mobile phone number of the profile; <code>null</code> if never provided; blank if provided then deleted")

  public String getOfficeCompanyMobile() {
    return officeCompanyMobile;
  }


  public void setOfficeCompanyMobile(String officeCompanyMobile) {
    
    
    
    this.officeCompanyMobile = officeCompanyMobile;
  }


  public Profile homePhone(String homePhone) {
    
    
    
    
    this.homePhone = homePhone;
    return this;
  }

   /**
   * home phone number of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return homePhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "home phone number of the profile; <code>null</code> if never provided; blank if provided then deleted")

  public String getHomePhone() {
    return homePhone;
  }


  public void setHomePhone(String homePhone) {
    
    
    
    this.homePhone = homePhone;
  }


  public Profile mobilePhone(String mobilePhone) {
    
    
    
    
    this.mobilePhone = mobilePhone;
    return this;
  }

   /**
   * mobile phone number of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return mobilePhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "mobile phone number of the profile; <code>null</code> if never provided; blank if provided then deleted")

  public String getMobilePhone() {
    return mobilePhone;
  }


  public void setMobilePhone(String mobilePhone) {
    
    
    
    this.mobilePhone = mobilePhone;
  }


  public Profile home(Home home) {
    
    
    
    
    this.home = home;
    return this;
  }

   /**
   * Get home
   * @return home
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Home getHome() {
    return home;
  }


  public void setHome(Home home) {
    
    
    
    this.home = home;
  }


  public Profile office(Office office) {
    
    
    
    
    this.office = office;
    return this;
  }

   /**
   * Get office
   * @return office
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Office getOffice() {
    return office;
  }


  public void setOffice(Office office) {
    
    
    
    this.office = office;
  }


  public Profile emergencyContact(String emergencyContact) {
    
    
    
    
    this.emergencyContact = emergencyContact;
    return this;
  }

   /**
   * name of the profile&#39;s emergency contact; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return emergencyContact
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "name of the profile's emergency contact; <code>null</code> if never provided; blank if provided then deleted")

  public String getEmergencyContact() {
    return emergencyContact;
  }


  public void setEmergencyContact(String emergencyContact) {
    
    
    
    this.emergencyContact = emergencyContact;
  }


  public Profile emergencyContactPhone(String emergencyContactPhone) {
    
    
    
    
    this.emergencyContactPhone = emergencyContactPhone;
    return this;
  }

   /**
   * phone number of the profile&#39;s emergency contact; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return emergencyContactPhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "phone number of the profile's emergency contact; <code>null</code> if never provided; blank if provided then deleted")

  public String getEmergencyContactPhone() {
    return emergencyContactPhone;
  }


  public void setEmergencyContactPhone(String emergencyContactPhone) {
    
    
    
    this.emergencyContactPhone = emergencyContactPhone;
  }


  public Profile resume(String resume) {
    
    
    
    
    this.resume = resume;
    return this;
  }

   /**
   * resume of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return resume
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "resume of the profile; <code>null</code> if never provided; blank if provided then deleted")

  public String getResume() {
    return resume;
  }


  public void setResume(String resume) {
    
    
    
    this.resume = resume;
  }


  public Profile currentJobDescription(String currentJobDescription) {
    
    
    
    
    this.currentJobDescription = currentJobDescription;
    return this;
  }

   /**
   * current job description of of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return currentJobDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "current job description of of the profile; <code>null</code> if never provided; blank if provided then deleted")

  public String getCurrentJobDescription() {
    return currentJobDescription;
  }


  public void setCurrentJobDescription(String currentJobDescription) {
    
    
    
    this.currentJobDescription = currentJobDescription;
  }


  public Profile jobDescription(String jobDescription) {
    
    
    
    
    this.jobDescription = jobDescription;
    return this;
  }

   /**
   * current job description of of the profile; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return jobDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "current job description of of the profile; <code>null</code> if never provided; blank if provided then deleted")

  public String getJobDescription() {
    return jobDescription;
  }


  public void setJobDescription(String jobDescription) {
    
    
    
    this.jobDescription = jobDescription;
  }


  public Profile salary(Salary salary) {
    
    
    
    
    this.salary = salary;
    return this;
  }

   /**
   * Get salary
   * @return salary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Salary getSalary() {
    return salary;
  }


  public void setSalary(Salary salary) {
    
    
    
    this.salary = salary;
  }


  public Profile healthcare(Healthcare healthcare) {
    
    
    
    
    this.healthcare = healthcare;
    return this;
  }

   /**
   * Get healthcare
   * @return healthcare
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Healthcare getHealthcare() {
    return healthcare;
  }


  public void setHealthcare(Healthcare healthcare) {
    
    
    
    this.healthcare = healthcare;
  }


  public Profile healthcareInfo(String healthcareInfo) {
    
    
    
    
    this.healthcareInfo = healthcareInfo;
    return this;
  }

   /**
   * description of the profile&#39;s healthcare plan; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return healthcareInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "description of the profile's healthcare plan; <code>null</code> if never provided; blank if provided then deleted")

  public String getHealthcareInfo() {
    return healthcareInfo;
  }


  public void setHealthcareInfo(String healthcareInfo) {
    
    
    
    this.healthcareInfo = healthcareInfo;
  }


  public Profile dental(Dental dental) {
    
    
    
    
    this.dental = dental;
    return this;
  }

   /**
   * Get dental
   * @return dental
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Dental getDental() {
    return dental;
  }


  public void setDental(Dental dental) {
    
    
    
    this.dental = dental;
  }


  public Profile dentalInfo(String dentalInfo) {
    
    
    
    
    this.dentalInfo = dentalInfo;
    return this;
  }

   /**
   * description of the profile&#39;s dental plan; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return dentalInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "description of the profile's dental plan; <code>null</code> if never provided; blank if provided then deleted")

  public String getDentalInfo() {
    return dentalInfo;
  }


  public void setDentalInfo(String dentalInfo) {
    
    
    
    this.dentalInfo = dentalInfo;
  }


  public Profile visionPlanInfo(String visionPlanInfo) {
    
    
    
    
    this.visionPlanInfo = visionPlanInfo;
    return this;
  }

   /**
   * description of the profile&#39;s vision plan; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return visionPlanInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "description of the profile's vision plan; <code>null</code> if never provided; blank if provided then deleted")

  public String getVisionPlanInfo() {
    return visionPlanInfo;
  }


  public void setVisionPlanInfo(String visionPlanInfo) {
    
    
    
    this.visionPlanInfo = visionPlanInfo;
  }


  public Profile lifeInsuranceInfo(String lifeInsuranceInfo) {
    
    
    
    
    this.lifeInsuranceInfo = lifeInsuranceInfo;
    return this;
  }

   /**
   * description of the profile&#39;s life insurance plan; &lt;code&gt;null&lt;/code&gt; if never provided; blank if provided then deleted
   * @return lifeInsuranceInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "description of the profile's life insurance plan; <code>null</code> if never provided; blank if provided then deleted")

  public String getLifeInsuranceInfo() {
    return lifeInsuranceInfo;
  }


  public void setLifeInsuranceInfo(String lifeInsuranceInfo) {
    
    
    
    this.lifeInsuranceInfo = lifeInsuranceInfo;
  }


  public Profile namelyTimeEmployeeRole(String namelyTimeEmployeeRole) {
    
    
    
    
    this.namelyTimeEmployeeRole = namelyTimeEmployeeRole;
    return this;
  }

   /**
   * only applies to companies using Namely Time
   * @return namelyTimeEmployeeRole
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "only applies to companies using Namely Time")

  public String getNamelyTimeEmployeeRole() {
    return namelyTimeEmployeeRole;
  }


  public void setNamelyTimeEmployeeRole(String namelyTimeEmployeeRole) {
    
    
    
    this.namelyTimeEmployeeRole = namelyTimeEmployeeRole;
  }


  public Profile namelyTimeManagerRole(String namelyTimeManagerRole) {
    
    
    
    
    this.namelyTimeManagerRole = namelyTimeManagerRole;
    return this;
  }

   /**
   * only applies to companies using Namely Time
   * @return namelyTimeManagerRole
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "only applies to companies using Namely Time")

  public String getNamelyTimeManagerRole() {
    return namelyTimeManagerRole;
  }


  public void setNamelyTimeManagerRole(String namelyTimeManagerRole) {
    
    
    
    this.namelyTimeManagerRole = namelyTimeManagerRole;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Profile instance itself
   */
  public Profile putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Profile profile = (Profile) o;
    return Objects.equals(this.id, profile.id) &&
        Objects.equals(this.email, profile.email) &&
        Objects.equals(this.firstName, profile.firstName) &&
        Objects.equals(this.lastName, profile.lastName) &&
        Objects.equals(this.userStatus, profile.userStatus) &&
        Objects.equals(this.updatedAt, profile.updatedAt) &&
        Objects.equals(this.createdAt, profile.createdAt) &&
        Objects.equals(this.preferredName, profile.preferredName) &&
        Objects.equals(this.image, profile.image) &&
        Objects.equals(this.fullName, profile.fullName) &&
        Objects.equals(this.jobTitle, profile.jobTitle) &&
        Objects.equals(this.reportsTo, profile.reportsTo) &&
        Objects.equals(this.employeeType, profile.employeeType) &&
        Objects.equals(this.accessRole, profile.accessRole) &&
        Objects.equals(this.ethnicity, profile.ethnicity) &&
        Objects.equals(this.links, profile.links) &&
        Objects.equals(this.middleName, profile.middleName) &&
        Objects.equals(this.gender, profile.gender) &&
        Objects.equals(this.jobChangeReason, profile.jobChangeReason) &&
        Objects.equals(this.terminatedReason, profile.terminatedReason) &&
        Objects.equals(this.startDate, profile.startDate) &&
        Objects.equals(this.departureDate, profile.departureDate) &&
        Objects.equals(this.employeeId, profile.employeeId) &&
        Objects.equals(this.personalEmail, profile.personalEmail) &&
        Objects.equals(this.dob, profile.dob) &&
        Objects.equals(this.ssn, profile.ssn) &&
        Objects.equals(this.maritalStatus, profile.maritalStatus) &&
        Objects.equals(this.bio, profile.bio) &&
        Objects.equals(this.assetManagement, profile.assetManagement) &&
        Objects.equals(this.laptopAssetNumber, profile.laptopAssetNumber) &&
        Objects.equals(this.corporateCardMember, profile.corporateCardMember) &&
        Objects.equals(this.keyTagNumber, profile.keyTagNumber) &&
        Objects.equals(this.linkedinUrl, profile.linkedinUrl) &&
        Objects.equals(this.officeMainNumber, profile.officeMainNumber) &&
        Objects.equals(this.officeDirectDial, profile.officeDirectDial) &&
        Objects.equals(this.officePhone, profile.officePhone) &&
        Objects.equals(this.officeFax, profile.officeFax) &&
        Objects.equals(this.officeCompanyMobile, profile.officeCompanyMobile) &&
        Objects.equals(this.homePhone, profile.homePhone) &&
        Objects.equals(this.mobilePhone, profile.mobilePhone) &&
        Objects.equals(this.home, profile.home) &&
        Objects.equals(this.office, profile.office) &&
        Objects.equals(this.emergencyContact, profile.emergencyContact) &&
        Objects.equals(this.emergencyContactPhone, profile.emergencyContactPhone) &&
        Objects.equals(this.resume, profile.resume) &&
        Objects.equals(this.currentJobDescription, profile.currentJobDescription) &&
        Objects.equals(this.jobDescription, profile.jobDescription) &&
        Objects.equals(this.salary, profile.salary) &&
        Objects.equals(this.healthcare, profile.healthcare) &&
        Objects.equals(this.healthcareInfo, profile.healthcareInfo) &&
        Objects.equals(this.dental, profile.dental) &&
        Objects.equals(this.dentalInfo, profile.dentalInfo) &&
        Objects.equals(this.visionPlanInfo, profile.visionPlanInfo) &&
        Objects.equals(this.lifeInsuranceInfo, profile.lifeInsuranceInfo) &&
        Objects.equals(this.namelyTimeEmployeeRole, profile.namelyTimeEmployeeRole) &&
        Objects.equals(this.namelyTimeManagerRole, profile.namelyTimeManagerRole)&&
        Objects.equals(this.additionalProperties, profile.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, email, firstName, lastName, userStatus, updatedAt, createdAt, preferredName, image, fullName, jobTitle, reportsTo, employeeType, accessRole, ethnicity, links, middleName, gender, jobChangeReason, terminatedReason, startDate, departureDate, employeeId, personalEmail, dob, ssn, maritalStatus, bio, assetManagement, laptopAssetNumber, corporateCardMember, keyTagNumber, linkedinUrl, officeMainNumber, officeDirectDial, officePhone, officeFax, officeCompanyMobile, homePhone, mobilePhone, home, office, emergencyContact, emergencyContactPhone, resume, currentJobDescription, jobDescription, salary, healthcare, healthcareInfo, dental, dentalInfo, visionPlanInfo, lifeInsuranceInfo, namelyTimeEmployeeRole, namelyTimeManagerRole, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Profile {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    userStatus: ").append(toIndentedString(userStatus)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    preferredName: ").append(toIndentedString(preferredName)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    reportsTo: ").append(toIndentedString(reportsTo)).append("\n");
    sb.append("    employeeType: ").append(toIndentedString(employeeType)).append("\n");
    sb.append("    accessRole: ").append(toIndentedString(accessRole)).append("\n");
    sb.append("    ethnicity: ").append(toIndentedString(ethnicity)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    jobChangeReason: ").append(toIndentedString(jobChangeReason)).append("\n");
    sb.append("    terminatedReason: ").append(toIndentedString(terminatedReason)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    departureDate: ").append(toIndentedString(departureDate)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    personalEmail: ").append(toIndentedString(personalEmail)).append("\n");
    sb.append("    dob: ").append(toIndentedString(dob)).append("\n");
    sb.append("    ssn: ").append(toIndentedString(ssn)).append("\n");
    sb.append("    maritalStatus: ").append(toIndentedString(maritalStatus)).append("\n");
    sb.append("    bio: ").append(toIndentedString(bio)).append("\n");
    sb.append("    assetManagement: ").append(toIndentedString(assetManagement)).append("\n");
    sb.append("    laptopAssetNumber: ").append(toIndentedString(laptopAssetNumber)).append("\n");
    sb.append("    corporateCardMember: ").append(toIndentedString(corporateCardMember)).append("\n");
    sb.append("    keyTagNumber: ").append(toIndentedString(keyTagNumber)).append("\n");
    sb.append("    linkedinUrl: ").append(toIndentedString(linkedinUrl)).append("\n");
    sb.append("    officeMainNumber: ").append(toIndentedString(officeMainNumber)).append("\n");
    sb.append("    officeDirectDial: ").append(toIndentedString(officeDirectDial)).append("\n");
    sb.append("    officePhone: ").append(toIndentedString(officePhone)).append("\n");
    sb.append("    officeFax: ").append(toIndentedString(officeFax)).append("\n");
    sb.append("    officeCompanyMobile: ").append(toIndentedString(officeCompanyMobile)).append("\n");
    sb.append("    homePhone: ").append(toIndentedString(homePhone)).append("\n");
    sb.append("    mobilePhone: ").append(toIndentedString(mobilePhone)).append("\n");
    sb.append("    home: ").append(toIndentedString(home)).append("\n");
    sb.append("    office: ").append(toIndentedString(office)).append("\n");
    sb.append("    emergencyContact: ").append(toIndentedString(emergencyContact)).append("\n");
    sb.append("    emergencyContactPhone: ").append(toIndentedString(emergencyContactPhone)).append("\n");
    sb.append("    resume: ").append(toIndentedString(resume)).append("\n");
    sb.append("    currentJobDescription: ").append(toIndentedString(currentJobDescription)).append("\n");
    sb.append("    jobDescription: ").append(toIndentedString(jobDescription)).append("\n");
    sb.append("    salary: ").append(toIndentedString(salary)).append("\n");
    sb.append("    healthcare: ").append(toIndentedString(healthcare)).append("\n");
    sb.append("    healthcareInfo: ").append(toIndentedString(healthcareInfo)).append("\n");
    sb.append("    dental: ").append(toIndentedString(dental)).append("\n");
    sb.append("    dentalInfo: ").append(toIndentedString(dentalInfo)).append("\n");
    sb.append("    visionPlanInfo: ").append(toIndentedString(visionPlanInfo)).append("\n");
    sb.append("    lifeInsuranceInfo: ").append(toIndentedString(lifeInsuranceInfo)).append("\n");
    sb.append("    namelyTimeEmployeeRole: ").append(toIndentedString(namelyTimeEmployeeRole)).append("\n");
    sb.append("    namelyTimeManagerRole: ").append(toIndentedString(namelyTimeManagerRole)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("email");
    openapiFields.add("first_name");
    openapiFields.add("last_name");
    openapiFields.add("user_status");
    openapiFields.add("updated_at");
    openapiFields.add("created_at");
    openapiFields.add("preferred_name");
    openapiFields.add("image");
    openapiFields.add("full_name");
    openapiFields.add("job_title");
    openapiFields.add("reports_to");
    openapiFields.add("employee_type");
    openapiFields.add("access_role");
    openapiFields.add("ethnicity");
    openapiFields.add("links");
    openapiFields.add("middle_name");
    openapiFields.add("gender");
    openapiFields.add("job_change_reason");
    openapiFields.add("terminated_reason");
    openapiFields.add("start_date");
    openapiFields.add("departure_date");
    openapiFields.add("employee_id");
    openapiFields.add("personal_email");
    openapiFields.add("dob");
    openapiFields.add("ssn");
    openapiFields.add("marital_status");
    openapiFields.add("bio");
    openapiFields.add("asset_management");
    openapiFields.add("laptop_asset_number");
    openapiFields.add("corporate_card_member");
    openapiFields.add("key_tag_number");
    openapiFields.add("linkedin_url");
    openapiFields.add("office_main_number");
    openapiFields.add("office_direct_dial");
    openapiFields.add("office_phone");
    openapiFields.add("office_fax");
    openapiFields.add("office_company_mobile");
    openapiFields.add("home_phone");
    openapiFields.add("mobile_phone");
    openapiFields.add("home");
    openapiFields.add("office");
    openapiFields.add("emergency_contact");
    openapiFields.add("emergency_contact_phone");
    openapiFields.add("resume");
    openapiFields.add("current_job_description");
    openapiFields.add("job_description");
    openapiFields.add("salary");
    openapiFields.add("healthcare");
    openapiFields.add("healthcare_info");
    openapiFields.add("dental");
    openapiFields.add("dental_info");
    openapiFields.add("vision_plan_info");
    openapiFields.add("life_insurance_info");
    openapiFields.add("namely_time_employee_role");
    openapiFields.add("namely_time_manager_role");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Profile
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Profile.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Profile is not found in the empty JSON string", Profile.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("user_status") != null && !jsonObj.get("user_status").isJsonNull()) && !jsonObj.get("user_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_status").toString()));
      }
      if ((jsonObj.get("preferred_name") != null && !jsonObj.get("preferred_name").isJsonNull()) && !jsonObj.get("preferred_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferred_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferred_name").toString()));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        Image.validateJsonObject(jsonObj.getAsJsonObject("image"));
      }
      if ((jsonObj.get("full_name") != null && !jsonObj.get("full_name").isJsonNull()) && !jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      // validate the optional field `job_title`
      if (jsonObj.get("job_title") != null && !jsonObj.get("job_title").isJsonNull()) {
        JobTitleLink.validateJsonObject(jsonObj.getAsJsonObject("job_title"));
      }
      if (jsonObj.get("reports_to") != null && !jsonObj.get("reports_to").isJsonNull()) {
        JsonArray jsonArrayreportsTo = jsonObj.getAsJsonArray("reports_to");
        if (jsonArrayreportsTo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reports_to").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reports_to` to be an array in the JSON string but got `%s`", jsonObj.get("reports_to").toString()));
          }

          // validate the optional field `reports_to` (array)
          for (int i = 0; i < jsonArrayreportsTo.size(); i++) {
            ProfileReportsToInner.validateJsonObject(jsonArrayreportsTo.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `employee_type`
      if (jsonObj.get("employee_type") != null && !jsonObj.get("employee_type").isJsonNull()) {
        ProfileEmployeeType.validateJsonObject(jsonObj.getAsJsonObject("employee_type"));
      }
      if ((jsonObj.get("access_role") != null && !jsonObj.get("access_role").isJsonNull()) && !jsonObj.get("access_role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_role").toString()));
      }
      if (!jsonObj.get("ethnicity").isJsonNull() && (jsonObj.get("ethnicity") != null && !jsonObj.get("ethnicity").isJsonNull()) && !jsonObj.get("ethnicity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ethnicity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ethnicity").toString()));
      }
      // validate the optional field `links`
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        ProfileLinks.validateJsonObject(jsonObj.getAsJsonObject("links"));
      }
      if ((jsonObj.get("middle_name") != null && !jsonObj.get("middle_name").isJsonNull()) && !jsonObj.get("middle_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middle_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middle_name").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("job_change_reason") != null && !jsonObj.get("job_change_reason").isJsonNull()) && !jsonObj.get("job_change_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_change_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_change_reason").toString()));
      }
      if ((jsonObj.get("terminated_reason") != null && !jsonObj.get("terminated_reason").isJsonNull()) && !jsonObj.get("terminated_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terminated_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terminated_reason").toString()));
      }
      if ((jsonObj.get("start_date") != null && !jsonObj.get("start_date").isJsonNull()) && !jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
      if ((jsonObj.get("departure_date") != null && !jsonObj.get("departure_date").isJsonNull()) && !jsonObj.get("departure_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departure_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departure_date").toString()));
      }
      if ((jsonObj.get("employee_id") != null && !jsonObj.get("employee_id").isJsonNull()) && !jsonObj.get("employee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_id").toString()));
      }
      if ((jsonObj.get("personal_email") != null && !jsonObj.get("personal_email").isJsonNull()) && !jsonObj.get("personal_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personal_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personal_email").toString()));
      }
      if ((jsonObj.get("dob") != null && !jsonObj.get("dob").isJsonNull()) && !jsonObj.get("dob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dob").toString()));
      }
      if ((jsonObj.get("ssn") != null && !jsonObj.get("ssn").isJsonNull()) && !jsonObj.get("ssn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssn").toString()));
      }
      if ((jsonObj.get("marital_status") != null && !jsonObj.get("marital_status").isJsonNull()) && !jsonObj.get("marital_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marital_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marital_status").toString()));
      }
      if ((jsonObj.get("bio") != null && !jsonObj.get("bio").isJsonNull()) && !jsonObj.get("bio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bio").toString()));
      }
      if ((jsonObj.get("asset_management") != null && !jsonObj.get("asset_management").isJsonNull()) && !jsonObj.get("asset_management").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset_management` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_management").toString()));
      }
      if ((jsonObj.get("laptop_asset_number") != null && !jsonObj.get("laptop_asset_number").isJsonNull()) && !jsonObj.get("laptop_asset_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `laptop_asset_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("laptop_asset_number").toString()));
      }
      if ((jsonObj.get("corporate_card_member") != null && !jsonObj.get("corporate_card_member").isJsonNull()) && !jsonObj.get("corporate_card_member").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `corporate_card_member` to be a primitive type in the JSON string but got `%s`", jsonObj.get("corporate_card_member").toString()));
      }
      if ((jsonObj.get("key_tag_number") != null && !jsonObj.get("key_tag_number").isJsonNull()) && !jsonObj.get("key_tag_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_tag_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key_tag_number").toString()));
      }
      if ((jsonObj.get("linkedin_url") != null && !jsonObj.get("linkedin_url").isJsonNull()) && !jsonObj.get("linkedin_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedin_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedin_url").toString()));
      }
      if ((jsonObj.get("office_main_number") != null && !jsonObj.get("office_main_number").isJsonNull()) && !jsonObj.get("office_main_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office_main_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office_main_number").toString()));
      }
      if ((jsonObj.get("office_direct_dial") != null && !jsonObj.get("office_direct_dial").isJsonNull()) && !jsonObj.get("office_direct_dial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office_direct_dial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office_direct_dial").toString()));
      }
      if ((jsonObj.get("office_phone") != null && !jsonObj.get("office_phone").isJsonNull()) && !jsonObj.get("office_phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office_phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office_phone").toString()));
      }
      if ((jsonObj.get("office_fax") != null && !jsonObj.get("office_fax").isJsonNull()) && !jsonObj.get("office_fax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office_fax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office_fax").toString()));
      }
      if ((jsonObj.get("office_company_mobile") != null && !jsonObj.get("office_company_mobile").isJsonNull()) && !jsonObj.get("office_company_mobile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office_company_mobile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office_company_mobile").toString()));
      }
      if ((jsonObj.get("home_phone") != null && !jsonObj.get("home_phone").isJsonNull()) && !jsonObj.get("home_phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home_phone").toString()));
      }
      if ((jsonObj.get("mobile_phone") != null && !jsonObj.get("mobile_phone").isJsonNull()) && !jsonObj.get("mobile_phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobile_phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobile_phone").toString()));
      }
      // validate the optional field `home`
      if (jsonObj.get("home") != null && !jsonObj.get("home").isJsonNull()) {
        Home.validateJsonObject(jsonObj.getAsJsonObject("home"));
      }
      // validate the optional field `office`
      if (jsonObj.get("office") != null && !jsonObj.get("office").isJsonNull()) {
        Office.validateJsonObject(jsonObj.getAsJsonObject("office"));
      }
      if ((jsonObj.get("emergency_contact") != null && !jsonObj.get("emergency_contact").isJsonNull()) && !jsonObj.get("emergency_contact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emergency_contact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emergency_contact").toString()));
      }
      if ((jsonObj.get("emergency_contact_phone") != null && !jsonObj.get("emergency_contact_phone").isJsonNull()) && !jsonObj.get("emergency_contact_phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emergency_contact_phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emergency_contact_phone").toString()));
      }
      if ((jsonObj.get("resume") != null && !jsonObj.get("resume").isJsonNull()) && !jsonObj.get("resume").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resume` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resume").toString()));
      }
      if ((jsonObj.get("current_job_description") != null && !jsonObj.get("current_job_description").isJsonNull()) && !jsonObj.get("current_job_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_job_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_job_description").toString()));
      }
      if ((jsonObj.get("job_description") != null && !jsonObj.get("job_description").isJsonNull()) && !jsonObj.get("job_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_description").toString()));
      }
      // validate the optional field `salary`
      if (jsonObj.get("salary") != null && !jsonObj.get("salary").isJsonNull()) {
        Salary.validateJsonObject(jsonObj.getAsJsonObject("salary"));
      }
      // validate the optional field `healthcare`
      if (jsonObj.get("healthcare") != null && !jsonObj.get("healthcare").isJsonNull()) {
        Healthcare.validateJsonObject(jsonObj.getAsJsonObject("healthcare"));
      }
      if ((jsonObj.get("healthcare_info") != null && !jsonObj.get("healthcare_info").isJsonNull()) && !jsonObj.get("healthcare_info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthcare_info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthcare_info").toString()));
      }
      // validate the optional field `dental`
      if (jsonObj.get("dental") != null && !jsonObj.get("dental").isJsonNull()) {
        Dental.validateJsonObject(jsonObj.getAsJsonObject("dental"));
      }
      if ((jsonObj.get("dental_info") != null && !jsonObj.get("dental_info").isJsonNull()) && !jsonObj.get("dental_info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dental_info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dental_info").toString()));
      }
      if ((jsonObj.get("vision_plan_info") != null && !jsonObj.get("vision_plan_info").isJsonNull()) && !jsonObj.get("vision_plan_info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vision_plan_info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vision_plan_info").toString()));
      }
      if ((jsonObj.get("life_insurance_info") != null && !jsonObj.get("life_insurance_info").isJsonNull()) && !jsonObj.get("life_insurance_info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `life_insurance_info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("life_insurance_info").toString()));
      }
      if ((jsonObj.get("namely_time_employee_role") != null && !jsonObj.get("namely_time_employee_role").isJsonNull()) && !jsonObj.get("namely_time_employee_role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namely_time_employee_role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namely_time_employee_role").toString()));
      }
      if ((jsonObj.get("namely_time_manager_role") != null && !jsonObj.get("namely_time_manager_role").isJsonNull()) && !jsonObj.get("namely_time_manager_role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namely_time_manager_role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namely_time_manager_role").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Profile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Profile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Profile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Profile.class));

       return (TypeAdapter<T>) new TypeAdapter<Profile>() {
           @Override
           public void write(JsonWriter out, Profile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Profile read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Profile instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Profile given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Profile
  * @throws IOException if the JSON string is invalid with respect to Profile
  */
  public static Profile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Profile.class);
  }

 /**
  * Convert an instance of Profile to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

