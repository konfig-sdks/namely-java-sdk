/*
 * Namely API
 * Move your app forward with the Namely API Move your app forward with the Namely API
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.FieldLinks;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Field
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Field {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private Boolean _default;

  public static final String SERIALIZED_NAME_DELETABLE = "deletable";
  @SerializedName(SERIALIZED_NAME_DELETABLE)
  private Boolean deletable;

  public static final String SERIALIZED_NAME_VALID_FORMAT_INFO = "valid_format_info";
  @SerializedName(SERIALIZED_NAME_VALID_FORMAT_INFO)
  private String validFormatInfo;

  public static final String SERIALIZED_NAME_BLOCK_INDEX = "block_index";
  @SerializedName(SERIALIZED_NAME_BLOCK_INDEX)
  private Integer blockIndex;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private FieldLinks links;

  public static final String SERIALIZED_NAME_EXAMPLE = "example";
  @SerializedName(SERIALIZED_NAME_EXAMPLE)
  private Boolean example;

  public static final String SERIALIZED_NAME_X_KONFIG_ORIGINAL_EXAMPLE = "x-konfig-original-example";
  @SerializedName(SERIALIZED_NAME_X_KONFIG_ORIGINAL_EXAMPLE)
  private Boolean xKonfigOriginalExample;

  public Field() {
  }

  public Field id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * unique identifier of the profile field
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "unique identifier of the profile field")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Field name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * immutable name of the profile field; auto created based on label if using UI to create profile field
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "immutable name of the profile field; auto created based on label if using UI to create profile field")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Field label(String label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * label of the profile field; editable on UI and through API
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "label of the profile field; editable on UI and through API")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    
    
    
    this.label = label;
  }


  public Field type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * immutable data type of the profile field; valid values include &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;image&lt;/code&gt;, &lt;code&gt;referencehistory&lt;/code&gt; (&lt;code&gt;job_title&lt;/code&gt; only), &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;longtext&lt;/code&gt;, &lt;code&gt;checkboxes&lt;/code&gt;, &lt;code&gt;address&lt;/code&gt;, &lt;code&gt;address&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;referenceselect&lt;/code&gt; (&lt;code&gt;user_status&lt;/code&gt; only), &lt;code&gt;salary&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;address&lt;/code&gt;
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "immutable data type of the profile field; valid values include <code>text</code>, <code>image</code>, <code>referencehistory</code> (<code>job_title</code> only), <code>select</code>, <code>date</code>, <code>email</code>, <code>longtext</code>, <code>checkboxes</code>, <code>address</code>, <code>address</code>, <code>file</code>, <code>referenceselect</code> (<code>user_status</code> only), <code>salary</code>, <code>number</code>, <code>address</code>")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public Field _default(Boolean _default) {
    
    
    
    
    this._default = _default;
    return this;
  }

   /**
   * N/A - no longer supported
   * @return _default
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "N/A - no longer supported")

  public Boolean getDefault() {
    return _default;
  }


  public void setDefault(Boolean _default) {
    
    
    
    this._default = _default;
  }


  public Field deletable(Boolean deletable) {
    
    
    
    
    this.deletable = deletable;
    return this;
  }

   /**
   * &lt;code&gt;true&lt;/code&gt; if the profile field is able to be deleted
   * @return deletable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<code>true</code> if the profile field is able to be deleted")

  public Boolean getDeletable() {
    return deletable;
  }


  public void setDeletable(Boolean deletable) {
    
    
    
    this.deletable = deletable;
  }


  public Field validFormatInfo(String validFormatInfo) {
    
    
    
    
    this.validFormatInfo = validFormatInfo;
    return this;
  }

   /**
   * valid format information for passing data through the API for the profile field
   * @return validFormatInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "valid format information for passing data through the API for the profile field")

  public String getValidFormatInfo() {
    return validFormatInfo;
  }


  public void setValidFormatInfo(String validFormatInfo) {
    
    
    
    this.validFormatInfo = validFormatInfo;
  }


  public Field blockIndex(Integer blockIndex) {
    
    
    
    
    this.blockIndex = blockIndex;
    return this;
  }

   /**
   * refers to the profile field \&quot;block\&quot; in which the profile field is located (included in \&quot;linked\&quot;); sequentially corresponds based the position of the block title; top position is 0
   * @return blockIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "refers to the profile field \"block\" in which the profile field is located (included in \"linked\"); sequentially corresponds based the position of the block title; top position is 0")

  public Integer getBlockIndex() {
    return blockIndex;
  }


  public void setBlockIndex(Integer blockIndex) {
    
    
    
    this.blockIndex = blockIndex;
  }


  public Field links(FieldLinks links) {
    
    
    
    
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FieldLinks getLinks() {
    return links;
  }


  public void setLinks(FieldLinks links) {
    
    
    
    this.links = links;
  }


  public Field example(Boolean example) {
    
    
    
    
    this.example = example;
    return this;
  }

   /**
   * N/A - no longer supported
   * @return example
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "N/A - no longer supported")

  public Boolean getExample() {
    return example;
  }


  public void setExample(Boolean example) {
    
    
    
    this.example = example;
  }


  public Field xKonfigOriginalExample(Boolean xKonfigOriginalExample) {
    
    
    
    
    this.xKonfigOriginalExample = xKonfigOriginalExample;
    return this;
  }

   /**
   * N/A - no longer supported
   * @return xKonfigOriginalExample
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "N/A - no longer supported")

  public Boolean getxKonfigOriginalExample() {
    return xKonfigOriginalExample;
  }


  public void setxKonfigOriginalExample(Boolean xKonfigOriginalExample) {
    
    
    
    this.xKonfigOriginalExample = xKonfigOriginalExample;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Field instance itself
   */
  public Field putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Field field = (Field) o;
    return Objects.equals(this.id, field.id) &&
        Objects.equals(this.name, field.name) &&
        Objects.equals(this.label, field.label) &&
        Objects.equals(this.type, field.type) &&
        Objects.equals(this._default, field._default) &&
        Objects.equals(this.deletable, field.deletable) &&
        Objects.equals(this.validFormatInfo, field.validFormatInfo) &&
        Objects.equals(this.blockIndex, field.blockIndex) &&
        Objects.equals(this.links, field.links) &&
        Objects.equals(this.example, field.example) &&
        Objects.equals(this.xKonfigOriginalExample, field.xKonfigOriginalExample)&&
        Objects.equals(this.additionalProperties, field.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, label, type, _default, deletable, validFormatInfo, blockIndex, links, example, xKonfigOriginalExample, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Field {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    deletable: ").append(toIndentedString(deletable)).append("\n");
    sb.append("    validFormatInfo: ").append(toIndentedString(validFormatInfo)).append("\n");
    sb.append("    blockIndex: ").append(toIndentedString(blockIndex)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    example: ").append(toIndentedString(example)).append("\n");
    sb.append("    xKonfigOriginalExample: ").append(toIndentedString(xKonfigOriginalExample)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("label");
    openapiFields.add("type");
    openapiFields.add("default");
    openapiFields.add("deletable");
    openapiFields.add("valid_format_info");
    openapiFields.add("block_index");
    openapiFields.add("links");
    openapiFields.add("example");
    openapiFields.add("x-konfig-original-example");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Field
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Field.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Field is not found in the empty JSON string", Field.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("valid_format_info") != null && !jsonObj.get("valid_format_info").isJsonNull()) && !jsonObj.get("valid_format_info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valid_format_info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valid_format_info").toString()));
      }
      // validate the optional field `links`
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        FieldLinks.validateJsonObject(jsonObj.getAsJsonObject("links"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Field.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Field' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Field> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Field.class));

       return (TypeAdapter<T>) new TypeAdapter<Field>() {
           @Override
           public void write(JsonWriter out, Field value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Field read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Field instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Field given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Field
  * @throws IOException if the JSON string is invalid with respect to Field
  */
  public static Field fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Field.class);
  }

 /**
  * Convert an instance of Field to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

