/*
 * Namely API
 * Move your app forward with the Namely API Move your app forward with the Namely API
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Link;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * GetNotificationsResponseLinks
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class GetNotificationsResponseLinks {
  public static final String SERIALIZED_NAME_NOTIFICATIONS_PROFILE_ID = "notifications.profile_id";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS_PROFILE_ID)
  private Link notificationsProfileId;

  public static final String SERIALIZED_NAME_PROFILES_JOB_TITLE = "profiles.job_title";
  @SerializedName(SERIALIZED_NAME_PROFILES_JOB_TITLE)
  private Link profilesJobTitle;

  public static final String SERIALIZED_NAME_PROFILES_IMAGE = "profiles.image";
  @SerializedName(SERIALIZED_NAME_PROFILES_IMAGE)
  private Link profilesImage;

  public static final String SERIALIZED_NAME_NOTIFICATIONS_REQUESTER_ID = "notifications.requester_id";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS_REQUESTER_ID)
  private Link notificationsRequesterId;

  public static final String SERIALIZED_NAME_NOTIFICATIONS_RESPONDER_ID = "notifications.responder_id";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS_RESPONDER_ID)
  private Link notificationsResponderId;

  public GetNotificationsResponseLinks() {
  }

  public GetNotificationsResponseLinks notificationsProfileId(Link notificationsProfileId) {
    
    
    
    
    this.notificationsProfileId = notificationsProfileId;
    return this;
  }

   /**
   * Get notificationsProfileId
   * @return notificationsProfileId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Link getNotificationsProfileId() {
    return notificationsProfileId;
  }


  public void setNotificationsProfileId(Link notificationsProfileId) {
    
    
    
    this.notificationsProfileId = notificationsProfileId;
  }


  public GetNotificationsResponseLinks profilesJobTitle(Link profilesJobTitle) {
    
    
    
    
    this.profilesJobTitle = profilesJobTitle;
    return this;
  }

   /**
   * Get profilesJobTitle
   * @return profilesJobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Link getProfilesJobTitle() {
    return profilesJobTitle;
  }


  public void setProfilesJobTitle(Link profilesJobTitle) {
    
    
    
    this.profilesJobTitle = profilesJobTitle;
  }


  public GetNotificationsResponseLinks profilesImage(Link profilesImage) {
    
    
    
    
    this.profilesImage = profilesImage;
    return this;
  }

   /**
   * Get profilesImage
   * @return profilesImage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Link getProfilesImage() {
    return profilesImage;
  }


  public void setProfilesImage(Link profilesImage) {
    
    
    
    this.profilesImage = profilesImage;
  }


  public GetNotificationsResponseLinks notificationsRequesterId(Link notificationsRequesterId) {
    
    
    
    
    this.notificationsRequesterId = notificationsRequesterId;
    return this;
  }

   /**
   * Get notificationsRequesterId
   * @return notificationsRequesterId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Link getNotificationsRequesterId() {
    return notificationsRequesterId;
  }


  public void setNotificationsRequesterId(Link notificationsRequesterId) {
    
    
    
    this.notificationsRequesterId = notificationsRequesterId;
  }


  public GetNotificationsResponseLinks notificationsResponderId(Link notificationsResponderId) {
    
    
    
    
    this.notificationsResponderId = notificationsResponderId;
    return this;
  }

   /**
   * Get notificationsResponderId
   * @return notificationsResponderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Link getNotificationsResponderId() {
    return notificationsResponderId;
  }


  public void setNotificationsResponderId(Link notificationsResponderId) {
    
    
    
    this.notificationsResponderId = notificationsResponderId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GetNotificationsResponseLinks instance itself
   */
  public GetNotificationsResponseLinks putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNotificationsResponseLinks getNotificationsResponseLinks = (GetNotificationsResponseLinks) o;
    return Objects.equals(this.notificationsProfileId, getNotificationsResponseLinks.notificationsProfileId) &&
        Objects.equals(this.profilesJobTitle, getNotificationsResponseLinks.profilesJobTitle) &&
        Objects.equals(this.profilesImage, getNotificationsResponseLinks.profilesImage) &&
        Objects.equals(this.notificationsRequesterId, getNotificationsResponseLinks.notificationsRequesterId) &&
        Objects.equals(this.notificationsResponderId, getNotificationsResponseLinks.notificationsResponderId)&&
        Objects.equals(this.additionalProperties, getNotificationsResponseLinks.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(notificationsProfileId, profilesJobTitle, profilesImage, notificationsRequesterId, notificationsResponderId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNotificationsResponseLinks {\n");
    sb.append("    notificationsProfileId: ").append(toIndentedString(notificationsProfileId)).append("\n");
    sb.append("    profilesJobTitle: ").append(toIndentedString(profilesJobTitle)).append("\n");
    sb.append("    profilesImage: ").append(toIndentedString(profilesImage)).append("\n");
    sb.append("    notificationsRequesterId: ").append(toIndentedString(notificationsRequesterId)).append("\n");
    sb.append("    notificationsResponderId: ").append(toIndentedString(notificationsResponderId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("notifications.profile_id");
    openapiFields.add("profiles.job_title");
    openapiFields.add("profiles.image");
    openapiFields.add("notifications.requester_id");
    openapiFields.add("notifications.responder_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetNotificationsResponseLinks
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GetNotificationsResponseLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNotificationsResponseLinks is not found in the empty JSON string", GetNotificationsResponseLinks.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `notifications.profile_id`
      if (jsonObj.get("notifications.profile_id") != null && !jsonObj.get("notifications.profile_id").isJsonNull()) {
        Link.validateJsonObject(jsonObj.getAsJsonObject("notifications.profile_id"));
      }
      // validate the optional field `profiles.job_title`
      if (jsonObj.get("profiles.job_title") != null && !jsonObj.get("profiles.job_title").isJsonNull()) {
        Link.validateJsonObject(jsonObj.getAsJsonObject("profiles.job_title"));
      }
      // validate the optional field `profiles.image`
      if (jsonObj.get("profiles.image") != null && !jsonObj.get("profiles.image").isJsonNull()) {
        Link.validateJsonObject(jsonObj.getAsJsonObject("profiles.image"));
      }
      // validate the optional field `notifications.requester_id`
      if (jsonObj.get("notifications.requester_id") != null && !jsonObj.get("notifications.requester_id").isJsonNull()) {
        Link.validateJsonObject(jsonObj.getAsJsonObject("notifications.requester_id"));
      }
      // validate the optional field `notifications.responder_id`
      if (jsonObj.get("notifications.responder_id") != null && !jsonObj.get("notifications.responder_id").isJsonNull()) {
        Link.validateJsonObject(jsonObj.getAsJsonObject("notifications.responder_id"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNotificationsResponseLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNotificationsResponseLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNotificationsResponseLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNotificationsResponseLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNotificationsResponseLinks>() {
           @Override
           public void write(JsonWriter out, GetNotificationsResponseLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNotificationsResponseLinks read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GetNotificationsResponseLinks instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetNotificationsResponseLinks given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetNotificationsResponseLinks
  * @throws IOException if the JSON string is invalid with respect to GetNotificationsResponseLinks
  */
  public static GetNotificationsResponseLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNotificationsResponseLinks.class);
  }

 /**
  * Convert an instance of GetNotificationsResponseLinks to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

