/*
 * Namely API
 * Move your app forward with the Namely API Move your app forward with the Namely API
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * different resolutions of the image
 */
@ApiModel(description = "different resolutions of the image")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Thumb {
  public static final String SERIALIZED_NAME_75X75 = "75x75";
  @SerializedName(SERIALIZED_NAME_75X75)
  private String _75x75;

  public static final String SERIALIZED_NAME_75X75C = "75x75c";
  @SerializedName(SERIALIZED_NAME_75X75C)
  private String _75x75c;

  public static final String SERIALIZED_NAME_150X150 = "150x150";
  @SerializedName(SERIALIZED_NAME_150X150)
  private String _150x150;

  public static final String SERIALIZED_NAME_150X150C = "150x150c";
  @SerializedName(SERIALIZED_NAME_150X150C)
  private String _150x150c;

  public static final String SERIALIZED_NAME_300X300 = "300x300";
  @SerializedName(SERIALIZED_NAME_300X300)
  private String _300x300;

  public static final String SERIALIZED_NAME_300X300C = "300x300c";
  @SerializedName(SERIALIZED_NAME_300X300C)
  private String _300x300c;

  public static final String SERIALIZED_NAME_450X450 = "450x450";
  @SerializedName(SERIALIZED_NAME_450X450)
  private String _450x450;

  public static final String SERIALIZED_NAME_550X450C = "550x450c";
  @SerializedName(SERIALIZED_NAME_550X450C)
  private String _550x450c;

  public static final String SERIALIZED_NAME_800X800 = "800x800";
  @SerializedName(SERIALIZED_NAME_800X800)
  private String _800x800;

  public static final String SERIALIZED_NAME_800X800C = "800x800c";
  @SerializedName(SERIALIZED_NAME_800X800C)
  private String _800x800c;

  public Thumb() {
  }

  public Thumb _75x75(String _75x75) {
    
    
    
    
    this._75x75 = _75x75;
    return this;
  }

   /**
   * Get _75x75
   * @return _75x75
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String get75x75() {
    return _75x75;
  }


  public void set75x75(String _75x75) {
    
    
    
    this._75x75 = _75x75;
  }


  public Thumb _75x75c(String _75x75c) {
    
    
    
    
    this._75x75c = _75x75c;
    return this;
  }

   /**
   * Get _75x75c
   * @return _75x75c
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String get75x75c() {
    return _75x75c;
  }


  public void set75x75c(String _75x75c) {
    
    
    
    this._75x75c = _75x75c;
  }


  public Thumb _150x150(String _150x150) {
    
    
    
    
    this._150x150 = _150x150;
    return this;
  }

   /**
   * Get _150x150
   * @return _150x150
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String get150x150() {
    return _150x150;
  }


  public void set150x150(String _150x150) {
    
    
    
    this._150x150 = _150x150;
  }


  public Thumb _150x150c(String _150x150c) {
    
    
    
    
    this._150x150c = _150x150c;
    return this;
  }

   /**
   * Get _150x150c
   * @return _150x150c
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String get150x150c() {
    return _150x150c;
  }


  public void set150x150c(String _150x150c) {
    
    
    
    this._150x150c = _150x150c;
  }


  public Thumb _300x300(String _300x300) {
    
    
    
    
    this._300x300 = _300x300;
    return this;
  }

   /**
   * Get _300x300
   * @return _300x300
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String get300x300() {
    return _300x300;
  }


  public void set300x300(String _300x300) {
    
    
    
    this._300x300 = _300x300;
  }


  public Thumb _300x300c(String _300x300c) {
    
    
    
    
    this._300x300c = _300x300c;
    return this;
  }

   /**
   * Get _300x300c
   * @return _300x300c
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String get300x300c() {
    return _300x300c;
  }


  public void set300x300c(String _300x300c) {
    
    
    
    this._300x300c = _300x300c;
  }


  public Thumb _450x450(String _450x450) {
    
    
    
    
    this._450x450 = _450x450;
    return this;
  }

   /**
   * Get _450x450
   * @return _450x450
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String get450x450() {
    return _450x450;
  }


  public void set450x450(String _450x450) {
    
    
    
    this._450x450 = _450x450;
  }


  public Thumb _550x450c(String _550x450c) {
    
    
    
    
    this._550x450c = _550x450c;
    return this;
  }

   /**
   * Get _550x450c
   * @return _550x450c
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String get550x450c() {
    return _550x450c;
  }


  public void set550x450c(String _550x450c) {
    
    
    
    this._550x450c = _550x450c;
  }


  public Thumb _800x800(String _800x800) {
    
    
    
    
    this._800x800 = _800x800;
    return this;
  }

   /**
   * Get _800x800
   * @return _800x800
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String get800x800() {
    return _800x800;
  }


  public void set800x800(String _800x800) {
    
    
    
    this._800x800 = _800x800;
  }


  public Thumb _800x800c(String _800x800c) {
    
    
    
    
    this._800x800c = _800x800c;
    return this;
  }

   /**
   * Get _800x800c
   * @return _800x800c
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String get800x800c() {
    return _800x800c;
  }


  public void set800x800c(String _800x800c) {
    
    
    
    this._800x800c = _800x800c;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Thumb instance itself
   */
  public Thumb putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Thumb thumb = (Thumb) o;
    return Objects.equals(this._75x75, thumb._75x75) &&
        Objects.equals(this._75x75c, thumb._75x75c) &&
        Objects.equals(this._150x150, thumb._150x150) &&
        Objects.equals(this._150x150c, thumb._150x150c) &&
        Objects.equals(this._300x300, thumb._300x300) &&
        Objects.equals(this._300x300c, thumb._300x300c) &&
        Objects.equals(this._450x450, thumb._450x450) &&
        Objects.equals(this._550x450c, thumb._550x450c) &&
        Objects.equals(this._800x800, thumb._800x800) &&
        Objects.equals(this._800x800c, thumb._800x800c)&&
        Objects.equals(this.additionalProperties, thumb.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_75x75, _75x75c, _150x150, _150x150c, _300x300, _300x300c, _450x450, _550x450c, _800x800, _800x800c, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Thumb {\n");
    sb.append("    _75x75: ").append(toIndentedString(_75x75)).append("\n");
    sb.append("    _75x75c: ").append(toIndentedString(_75x75c)).append("\n");
    sb.append("    _150x150: ").append(toIndentedString(_150x150)).append("\n");
    sb.append("    _150x150c: ").append(toIndentedString(_150x150c)).append("\n");
    sb.append("    _300x300: ").append(toIndentedString(_300x300)).append("\n");
    sb.append("    _300x300c: ").append(toIndentedString(_300x300c)).append("\n");
    sb.append("    _450x450: ").append(toIndentedString(_450x450)).append("\n");
    sb.append("    _550x450c: ").append(toIndentedString(_550x450c)).append("\n");
    sb.append("    _800x800: ").append(toIndentedString(_800x800)).append("\n");
    sb.append("    _800x800c: ").append(toIndentedString(_800x800c)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("75x75");
    openapiFields.add("75x75c");
    openapiFields.add("150x150");
    openapiFields.add("150x150c");
    openapiFields.add("300x300");
    openapiFields.add("300x300c");
    openapiFields.add("450x450");
    openapiFields.add("550x450c");
    openapiFields.add("800x800");
    openapiFields.add("800x800c");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Thumb
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Thumb.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Thumb is not found in the empty JSON string", Thumb.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("75x75") != null && !jsonObj.get("75x75").isJsonNull()) && !jsonObj.get("75x75").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `75x75` to be a primitive type in the JSON string but got `%s`", jsonObj.get("75x75").toString()));
      }
      if ((jsonObj.get("75x75c") != null && !jsonObj.get("75x75c").isJsonNull()) && !jsonObj.get("75x75c").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `75x75c` to be a primitive type in the JSON string but got `%s`", jsonObj.get("75x75c").toString()));
      }
      if ((jsonObj.get("150x150") != null && !jsonObj.get("150x150").isJsonNull()) && !jsonObj.get("150x150").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `150x150` to be a primitive type in the JSON string but got `%s`", jsonObj.get("150x150").toString()));
      }
      if ((jsonObj.get("150x150c") != null && !jsonObj.get("150x150c").isJsonNull()) && !jsonObj.get("150x150c").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `150x150c` to be a primitive type in the JSON string but got `%s`", jsonObj.get("150x150c").toString()));
      }
      if ((jsonObj.get("300x300") != null && !jsonObj.get("300x300").isJsonNull()) && !jsonObj.get("300x300").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `300x300` to be a primitive type in the JSON string but got `%s`", jsonObj.get("300x300").toString()));
      }
      if ((jsonObj.get("300x300c") != null && !jsonObj.get("300x300c").isJsonNull()) && !jsonObj.get("300x300c").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `300x300c` to be a primitive type in the JSON string but got `%s`", jsonObj.get("300x300c").toString()));
      }
      if ((jsonObj.get("450x450") != null && !jsonObj.get("450x450").isJsonNull()) && !jsonObj.get("450x450").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `450x450` to be a primitive type in the JSON string but got `%s`", jsonObj.get("450x450").toString()));
      }
      if ((jsonObj.get("550x450c") != null && !jsonObj.get("550x450c").isJsonNull()) && !jsonObj.get("550x450c").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `550x450c` to be a primitive type in the JSON string but got `%s`", jsonObj.get("550x450c").toString()));
      }
      if ((jsonObj.get("800x800") != null && !jsonObj.get("800x800").isJsonNull()) && !jsonObj.get("800x800").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `800x800` to be a primitive type in the JSON string but got `%s`", jsonObj.get("800x800").toString()));
      }
      if ((jsonObj.get("800x800c") != null && !jsonObj.get("800x800c").isJsonNull()) && !jsonObj.get("800x800c").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `800x800c` to be a primitive type in the JSON string but got `%s`", jsonObj.get("800x800c").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Thumb.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Thumb' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Thumb> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Thumb.class));

       return (TypeAdapter<T>) new TypeAdapter<Thumb>() {
           @Override
           public void write(JsonWriter out, Thumb value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Thumb read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Thumb instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Thumb given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Thumb
  * @throws IOException if the JSON string is invalid with respect to Thumb
  */
  public static Thumb fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Thumb.class);
  }

 /**
  * Convert an instance of Thumb to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

