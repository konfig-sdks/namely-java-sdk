/*
 * Namely API
 * Move your app forward with the Namely API Move your app forward with the Namely API
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateEvent;
import com.konfigthis.client.model.CreateEventPayload;
import com.konfigthis.client.model.GetEventsResponse;
import com.konfigthis.client.model.HomeFeedGetEventResponse;
import com.konfigthis.client.model.PostEventsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventsApi
 */
@Disabled
public class EventsApiTest {

    private static EventsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EventsApi(apiClient);
    }

    /**
     * Get all Events
     *
     * Returns all events, paginated. Linked to the event is an array of any profiles that commented on the event. Only events associated with the profiles of active employees are eligible to appear.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsTest() throws ApiException {
        Integer limit = null;
        String after = null;
        String filterType = null;
        String profileId = null;
        String order = null;
        GetEventsResponse response = api.events()
                .limit(limit)
                .after(after)
                .filterType(filterType)
                .profileId(profileId)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an Announcement
     *
     * Creates an announcement. Other event types are auto-generated and cannot be manually created.  The file parameters allow you to include a file which is located in the announcement. As with uploading a file to a profile, the file must be previously uploaded via the &#x60;file create&#x60; endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void events_0Test() throws ApiException {
        List<CreateEventPayload> events = null;
        PostEventsResponse response = api.events_0(events)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an Event
     *
     * Returns information about a single event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventTest() throws ApiException {
        String id = null;
        HomeFeedGetEventResponse response = api.getEvent(id)
                .execute();
        // TODO: test validations
    }

}
