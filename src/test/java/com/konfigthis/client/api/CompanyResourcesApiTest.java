/*
 * Namely API
 * Move your app forward with the Namely API Move your app forward with the Namely API
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CompanyResourcesGetByIdResponse;
import com.konfigthis.client.model.CompanyResourcesGetFolderResourcesResponse;
import com.konfigthis.client.model.CompanyResourcesUpdateFolderNameResponse;
import com.konfigthis.client.model.CreateFolder;
import com.konfigthis.client.model.CreateFolderPayload;
import com.konfigthis.client.model.GetFoldersResponse;
import com.konfigthis.client.model.GetResourcesResponse;
import com.konfigthis.client.model.PostFoldersResponse;
import com.konfigthis.client.model.UpdateFolder;
import com.konfigthis.client.model.UpdateFolderPayload;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CompanyResourcesApi
 */
@Disabled
public class CompanyResourcesApiTest {

    private static CompanyResourcesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CompanyResourcesApi(apiClient);
    }

    /**
     * Delete Folder
     *
     * You must pass in the folder id to delete a specific folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFolderByIdTest() throws ApiException {
        String id = null;
        api.deleteFolderById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Resource
     *
     * This endpoint deletes a specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourceByIdTest() throws ApiException {
        String id = null;
        api.deleteResourceById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all Folders
     *
     * This endpoint returns a list of folders and their information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void foldersTest() throws ApiException {
        GetFoldersResponse response = api.folders()
                .execute();
        // TODO: test validations
    }

    /**
     * Create Folder
     *
     * To create a folder, a title is required. An array of folders will be returned upon success, similar to folders index endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void folders_0Test() throws ApiException {
        List<CreateFolderPayload> folders = null;
        PostFoldersResponse response = api.folders_0(folders)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a Resource
     *
     * Specify the id of the resource to get a complete description. Please see \&quot;Download Resource\&quot; documentation to actually download a specific resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String id = null;
        CompanyResourcesGetByIdResponse response = api.getById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Resources in a Folder
     *
     * This method returns an array of resources, whose format and content will be the same as the show resource endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFolderResourcesTest() throws ApiException {
        String id = null;
        CompanyResourcesGetFolderResourcesResponse response = api.getFolderResources(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Resources not in a Folder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesTest() throws ApiException {
        GetResourcesResponse response = api.resources()
                .execute();
        // TODO: test validations
    }

    /**
     * Update Folder
     *
     * Updates the name of a folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFolderNameTest() throws ApiException {
        List<UpdateFolderPayload> folders = null;
        String id = null;
        CompanyResourcesUpdateFolderNameResponse response = api.updateFolderName(folders, id)
                .execute();
        // TODO: test validations
    }

}
