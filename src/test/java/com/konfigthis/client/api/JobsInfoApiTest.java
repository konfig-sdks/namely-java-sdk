/*
 * Namely API
 * Move your app forward with the Namely API Move your app forward with the Namely API
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateJobTier;
import com.konfigthis.client.model.CreateJobTierPayload;
import com.konfigthis.client.model.CreateJobTitle;
import com.konfigthis.client.model.CreateJobTitlePayload;
import com.konfigthis.client.model.JobsInfoCreateJobTierResponse;
import com.konfigthis.client.model.JobsInfoCreateJobTitleResponse;
import com.konfigthis.client.model.JobsInfoGetAllJobTiersResponse;
import com.konfigthis.client.model.JobsInfoGetAllJobTitlesResponse;
import com.konfigthis.client.model.JobsInfoGetJobTierResponse;
import com.konfigthis.client.model.JobsInfoGetJobTitleByIdResponse;
import com.konfigthis.client.model.JobsInfoUpdateJobTitleResponse;
import com.konfigthis.client.model.JobsInfoUpdateLabelResponse;
import com.konfigthis.client.model.UpdateJobTier;
import com.konfigthis.client.model.UpdateJobTierPayload;
import com.konfigthis.client.model.UpdateJobTitle;
import com.konfigthis.client.model.UpdateJobTitlePayload;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobsInfoApi
 */
@Disabled
public class JobsInfoApiTest {

    private static JobsInfoApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new JobsInfoApi(apiClient);
    }

    /**
     * Create a Job Tier
     *
     * Creates a job tier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createJobTierTest() throws ApiException {
        List<CreateJobTierPayload> jobTiers = null;
        JobsInfoCreateJobTierResponse response = api.createJobTier(jobTiers)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a Job Title
     *
     * Creates a job title.  Use the #endpoint:xfyRRDnWE32d5PNBZ endpoint to get a list of job tiers, whose &lt;code&gt;id&lt;/code&gt; is used to populate the value for the &lt;code&gt;parent&lt;/code&gt; (job tier) key in the request body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createJobTitleTest() throws ApiException {
        List<CreateJobTitlePayload> jobTitles = null;
        JobsInfoCreateJobTitleResponse response = api.createJobTitle(jobTitles)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all Job Tiers
     *
     * Returns an array of all job tiers. Each job tier can have zero to many linked job titles (while each job title must have one and only one linked job tier).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllJobTiersTest() throws ApiException {
        JobsInfoGetAllJobTiersResponse response = api.getAllJobTiers()
                .execute();
        // TODO: test validations
    }

    /**
     * Get all Job Titles
     *
     * Returns all job titles. Each job title must have one and only one linked job tier (and each job tier can have zero to many linked job titles).  When using the #endpoint:K6iFb2x6z2yTM9jev endpoint, the API user must either use the &lt;code&gt;title&lt;/code&gt; or &lt;code&gt;id&lt;/code&gt; of a &lt;code&gt;job_title&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllJobTitlesTest() throws ApiException {
        JobsInfoGetAllJobTitlesResponse response = api.getAllJobTitles()
                .execute();
        // TODO: test validations
    }

    /**
     * Get a Job Tier
     *
     * Returns information about a single job tier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobTierTest() throws ApiException {
        String id = null;
        JobsInfoGetJobTierResponse response = api.getJobTier(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a Job Title
     *
     * Returns information about a single Job Title..  When using the #endpoint:K6iFb2x6z2yTM9jev endpoint, the API user must either use the &lt;code&gt;title&lt;/code&gt; or &lt;code&gt;id&lt;/code&gt; of a &lt;code&gt;job_title&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobTitleByIdTest() throws ApiException {
        String id = null;
        JobsInfoGetJobTitleByIdResponse response = api.getJobTitleById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a Job Title
     *
     * Updates the label and/or parent (job tier) of a job title.  Use the #endpoint:xfyRRDnWE32d5PNBZ endpoint to get a list of job tiers, whose &lt;code&gt;id&lt;/code&gt; is used to populate the value for the &lt;code&gt;parent&lt;/code&gt; (job tier) key in the request body.   If not updating the &lt;code&gt;parent&lt;/code&gt;, use the &lt;code&gt;id&lt;/code&gt; of the current &lt;code&gt;parent&lt;/code&gt; value; if not updating the &lt;code&gt;title&lt;/code&gt;, use the current job title &lt;code&gt;title&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateJobTitleTest() throws ApiException {
        List<UpdateJobTitlePayload> jobTitles = null;
        String id = null;
        JobsInfoUpdateJobTitleResponse response = api.updateJobTitle(jobTitles, id)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a Job Tier
     *
     * Updates the label of a job tier.  Use the #endpoint:3iHo6fSyKNs2dsaSC endpoint to get a list of job tiers, whose &lt;code&gt;id&lt;/code&gt; is used in the path parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLabelTest() throws ApiException {
        List<UpdateJobTierPayload> jobTiers = null;
        String id = null;
        JobsInfoUpdateLabelResponse response = api.updateLabel(jobTiers, id)
                .execute();
        // TODO: test validations
    }

}
