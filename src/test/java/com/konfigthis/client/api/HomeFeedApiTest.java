/*
 * Namely API
 * Move your app forward with the Namely API Move your app forward with the Namely API
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateComment;
import com.konfigthis.client.model.CreateCommentPayload;
import com.konfigthis.client.model.CreateEvent;
import com.konfigthis.client.model.CreateEventPayload;
import com.konfigthis.client.model.DeleteLike;
import com.konfigthis.client.model.DeleteLikePayload;
import com.konfigthis.client.model.GetEventsResponse;
import com.konfigthis.client.model.HomeFeedCreateEventCommentResponse;
import com.konfigthis.client.model.HomeFeedCreateEventLikeResponse;
import com.konfigthis.client.model.HomeFeedDeleteAnnouncementResponse;
import com.konfigthis.client.model.HomeFeedDeleteEventCommentLikeResponse;
import com.konfigthis.client.model.HomeFeedGetEventCommentLikesResponse;
import com.konfigthis.client.model.HomeFeedGetEventCommentsResponse;
import com.konfigthis.client.model.HomeFeedGetEventLikesResponse;
import com.konfigthis.client.model.HomeFeedGetEventResponse;
import com.konfigthis.client.model.HomeFeedRemoveEventCommentResponse;
import com.konfigthis.client.model.HomeFeedRemoveEventLikeResponse;
import com.konfigthis.client.model.PostEventsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HomeFeedApi
 */
@Disabled
public class HomeFeedApiTest {

    private static HomeFeedApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new HomeFeedApi(apiClient);
    }

    /**
     * Create an Event&#39;s Comment
     *
     * Creates a comment on a particular event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEventCommentTest() throws ApiException {
        List<CreateCommentPayload> comments = null;
        String id = null;
        HomeFeedCreateEventCommentResponse response = api.createEventComment(comments, id)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an Event&#39;s Like
     *
     * Like a particular event simply by &#x60;POST&#x60;ing to the endpoint with its &lt;code&gt;id&lt;/code&gt; in the path parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEventLikeTest() throws ApiException {
        String id = null;
        HomeFeedCreateEventLikeResponse response = api.createEventLike(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an Announcement
     *
     * Delete a particular event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAnnouncementTest() throws ApiException {
        String id = null;
        HomeFeedDeleteAnnouncementResponse response = api.deleteAnnouncement(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an Event&#39;s Comment&#39;s Like
     *
     * Delete your like from a particular comment. You can only delete your own like (from the profile related to the token).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEventCommentLikeTest() throws ApiException {
        String commentId = null;
        HomeFeedDeleteEventCommentLikeResponse response = api.deleteEventCommentLike(commentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all Events
     *
     * Returns all events, paginated. Linked to the event is an array of any profiles that commented on the event. Only events associated with the profiles of active employees are eligible to appear.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsTest() throws ApiException {
        Integer limit = null;
        String after = null;
        String filterType = null;
        String profileId = null;
        String order = null;
        GetEventsResponse response = api.events()
                .limit(limit)
                .after(after)
                .filterType(filterType)
                .profileId(profileId)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an Announcement
     *
     * Creates an announcement. Other event types are auto-generated and cannot be manually created.  The file parameters allow you to include a file which is located in the announcement. As with uploading a file to a profile, the file must be previously uploaded via the &#x60;file create&#x60; endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void events_0Test() throws ApiException {
        List<CreateEventPayload> events = null;
        PostEventsResponse response = api.events_0(events)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an Event
     *
     * Returns information about a single event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventTest() throws ApiException {
        String id = null;
        HomeFeedGetEventResponse response = api.getEvent(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an Event&#39;s Comment&#39;s Likes
     *
     * Returns a list of profiles that liked a particular comment on a particular event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventCommentLikesTest() throws ApiException {
        String commentId = null;
        HomeFeedGetEventCommentLikesResponse response = api.getEventCommentLikes(commentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an Event&#39;s Comments
     *
     * Returns all comments associated with a particular event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventCommentsTest() throws ApiException {
        String eventId = null;
        HomeFeedGetEventCommentsResponse response = api.getEventComments(eventId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an Event&#39;s Likes
     *
     * Returns a list of profiles that liked a particular event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventLikesTest() throws ApiException {
        String eventId = null;
        HomeFeedGetEventLikesResponse response = api.getEventLikes(eventId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an Event&#39;s Comment&#39;s Like
     *
     * Like a particular comment simply by &#x60;POST&#x60;ing to the endpoint with its &lt;code&gt;id&lt;/code&gt; in the path parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void likeEventCommentTest() throws ApiException {
        String commentId = null;
        Object response = api.likeEventComment(commentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an Event&#39;s Comment
     *
     * Delete a particular comment on an event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeEventCommentTest() throws ApiException {
        String eventId = null;
        String commentId = null;
        HomeFeedRemoveEventCommentResponse response = api.removeEventComment(eventId, commentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an Event&#39;s Like
     *
     * Delete a particular like from an event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeEventLikeTest() throws ApiException {
        List<DeleteLikePayload> message = null;
        String eventId = null;
        HomeFeedRemoveEventLikeResponse response = api.removeEventLike(message, eventId)
                .execute();
        // TODO: test validations
    }

}
